<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>技術筆記</title><link href="http://twmht.github.io/blog/" rel="alternate"></link><link href="http://twmht.github.io/blog/feeds/design-pattern.atom.xml" rel="self"></link><id>http://twmht.github.io/blog/</id><updated>2014-06-29T16:14:36+08:00</updated><entry><title>Memento Pattern</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/memento.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/memento.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;在文書軟體的操作環境下，即使不小心誤刪除了某些文字內容，只要利用 undo 功能就能救回被刪除前的內容。有些文書軟體甚至支援一次以上的還原動作。
物件導向程式如果要執行復原，必須預先儲存物件個體的狀態。但是又不能只做儲存的動作，否則無法以儲存的情報將物件的個體復原的原始的狀態。
必須要能自由存取物件個體內部的情報，才能還原物件個體。不過如果對存取動作毫不設限，又會讓高度依賴類別內部結構的程式碼分散到程式各處，增加修改類別時的困擾。這稱為封裝式破壞。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;加入表示物件個體狀態的功能，而能在執行儲存以及復原時不發生封裝性破壞。它會讓某個時間點的物件個體狀態紀錄儲存起來，等到以後再讓物件個體復原到當時的狀態。例如:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;undo (復原)&lt;/li&gt;
&lt;li&gt;redo (重複)&lt;/li&gt;
&lt;li&gt;history (產生操作紀錄)&lt;/li&gt;
&lt;li&gt;snapshot (儲存目前狀態)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;模擬一個收集水果的骰子遊戲，遊戲規則很簡單:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;遊戲會自動進行&lt;/li&gt;
&lt;li&gt;遊戲的主人翁丟骰子，根據骰子的結果&lt;/li&gt;
&lt;li&gt;出現好的點數，則金錢增加。&lt;/li&gt;
&lt;li&gt;出現不好的點數，則金錢減少。&lt;/li&gt;
&lt;li&gt;出現很好的點數，可額外得到一個水果。&lt;/li&gt;
&lt;li&gt;玩到沒錢時，遊戲結束。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;為了後面能不受影響繼續進行，程式中儲存金錢的位置有建立一個 Memento 類別的物件個體，用來儲存 "目前的狀態"。裡面儲存的是現階段有的金錢和水果。利用預先儲存起來的 Memento 物件個體可以回復到原先的狀態，避免如果一直輸到沒有錢的時候會結束程式。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/3bb699572e0c4e9333d3.js"&gt;&lt;/script&gt;

&lt;h4&gt;Originator (產生者) 參與者&lt;/h4&gt;
&lt;p&gt;Originator 參與者是在想儲存本身目前狀態時產生一個 Memento 參與者。當 Originator 參與者又接收到以前的 Memento 參與者時，變進行恢復到產生 Memento 參與者時狀態的處理。例如 Gamer 類別。&lt;/p&gt;
&lt;h4&gt;Memento (紀念品) 參與者&lt;/h4&gt;
&lt;p&gt;Memento 參與者是整合 Originator 參與者的內部資訊。Memento 參與者雖然有 Originator 參與者的內部資訊，但並不會隨便把資訊公開出去。
共有以下兩種介面:
&lt;em&gt; wide interface: Memento 參與者所提供的 "wide interface" 是一個可取得物件狀態恢復原狀時之必要資訊的所有方法的集合。wide interface 會洩漏 Memento 參與者的內部狀態，所以只有 Originator 參與者能使用它。
&lt;/em&gt; narrow interface: Memento 參與者所提供的 "narrow interface" 是給外部 Carataker 參與者看的。narrow interface 能力有限，可預防內部狀態公開給外部的危險。&lt;/p&gt;
&lt;p&gt;視情況使用這兩種不同介面可以避免物件封裝化遭破壞。
扮演的角色例如 Memento 類別。&lt;/p&gt;
&lt;h4&gt;Carataker (照料的人) 參與者&lt;/h4&gt;
&lt;p&gt;如想儲存目前 Originator 參與者的狀態時，Carataker 參與者會把這個情形告訴 Originator 參與者。Originator 參與者接收這個訊息後就產生 Memento 參與者，然後傳遞給 Carataker 參與者。Carataker 為了將來可能會需要使用，因此要預先儲存這個 Memento。例如 Main 類別就是一個Carataker。
但是 Carataker 只能使用 Memento 的 narrow interface，所以不能存取 Memento 的內部資訊。 它只會把別人產生出來的 Memento 照單全收儲存起來，當作是一塊未知區域。
Originator 和 Memento 的結合相當緊密，但 Carataker 跟 Memento 的結合較為鬆散。Memento 會對 Carataker 隱藏資訊。&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;p&gt;Carataker 去找 Originator 產生表示&lt;strong&gt;目前狀態&lt;/strong&gt;的 Memento。Carataker 並不知道　Memento 的內部資訊，而且也不過問。Carataker 為了以後可能要還原，所以預先將 Memento 儲存起來。有這個需求時，再取出 Memento 交給 Originator，即可順利還原。&lt;/p&gt;
&lt;h4&gt;區隔 Carataker 以及 Originator&lt;/h4&gt;
&lt;p&gt;為什麼不把復原的動作寫到 Originator 就好呢？&lt;/p&gt;
&lt;p&gt;Carataker 的工作是決定要在哪個時間點做快照、復原以及保留 Memento。&lt;/p&gt;
&lt;p&gt;而 Originator 則是負責產生 Memento 以及利用傳遞過來的 Memento 復原自己的狀態。&lt;/p&gt;
&lt;p&gt;Carataker 跟 Originator 有這樣的分配，好處是要做以下的修正時，可以不用去修改 Originator。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;將復原動作修改為需要有一個步驟以上&lt;/li&gt;
&lt;li&gt;除了復原之外，還要將目前的狀態儲存成檔案&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;1. Carataker 只能利用 narrow API 來操作 Memento 。請問如果 Carataker 能隨意操作 Memento 時，會發生什麼問題?&lt;/h4&gt;
&lt;p&gt;會喪失 &lt;strong&gt;Carataker&lt;/strong&gt; 和 &lt;strong&gt;Originator、Memento&lt;/strong&gt;之間的獨立性。&lt;/p&gt;
&lt;p&gt;如果 Carataker 能隨意操作 Memento，則當 Originator 內部有修改時，Carataker 也必須做同樣的修改。&lt;/p&gt;
&lt;p&gt;若 Carataker 只使用 narrow API，則只要修改沒有動到這個 API，就能隨意修改 Originator 和 Memento。&lt;/p&gt;
&lt;h4&gt;2.決定狀態的因素只有水果跟金錢，如果資訊量較多時，必須有更多記憶體或磁碟空間來儲存。要如何解決這個問題?&lt;/h4&gt;
&lt;p&gt;如果有計算跟已經儲存的 Memento 的資料差異，也許可以做資料壓縮。&lt;/p&gt;
&lt;h3&gt;3. 利用串列化（serialization)功能可以將 Memento 的物件個體儲存成檔案。&lt;/h3&gt;
&lt;script src="https://gist.github.com/twmht/3aa2a70b07a4bce34b67.js"&gt;&lt;/script&gt;</summary></entry><entry><title>Observer Pattern</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/observer.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/observer.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;observer是觀察的人，也就是觀察者的意思。
當被Observer Pattern列入觀察名單的狀態發生變化，就會通知觀察者。在寫一些跟狀態變化有關的處理時，Observer Pattern是很好用的工具。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;重點在於設計Observer Interface以及有具體實作的Observer類別。另外，也需要設計被觀察者。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;觀察者觀察產生多個數值的物件，然後輸出該值，輸出方式因觀察者而異。在這個範例中，有用數字來輸出的觀察者以及用長條圖來輸出的觀察者。&lt;/p&gt;
&lt;p&gt;在 Observer Interface 中，呼叫 update 方法的是產生數值的 NumberGenerator ( generator 是 "產生器" "產生設備" 的意思)。update 方法是 NumberGenerator 用來告訴 Observer 說 "我的內容已經更新過了，請你也更新你的輸出內容" 的方法。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/3fd90157d2327707922e.js"&gt;&lt;/script&gt;

&lt;h4&gt;Subject (被觀察者) 參與者&lt;/h4&gt;
&lt;p&gt;表示被觀察的一方。Subject 參與者具有登錄或刪除 Observer 參與者的方法。另外也有宣告了 "取得目前狀態" 的方法。例如 NumberGenerator 類別。&lt;/p&gt;
&lt;h4&gt;ConcreteSubject 參與者&lt;/h4&gt;
&lt;p&gt;表示實際 "被觀察的一方" 的參與者。一旦狀態有變化，就會立刻通知已登錄的 Observer 參與者。例如 RandomNumberGenerator 類別。&lt;/p&gt;
&lt;h4&gt;Observer 參與者&lt;/h4&gt;
&lt;p&gt;被 Subject 參與者通知 "狀態有變化" 的參與者。通知的方法是 update。例如 Observer 介面。&lt;/p&gt;
&lt;h4&gt;ConcreteObserver 參與者&lt;/h4&gt;
&lt;p&gt;實際的 Observer。一呼叫 update 方法時，即可從該方法取得 Subject 參與者的目前狀態。 例如 DigitalObserver 類別和 GraphObserver 類別。&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;h4&gt;讓類別再利用&lt;/h4&gt;
&lt;p&gt;RandomNumberGenerator 類別並不知道現在在觀察自己的到底是 DigitalObserver 還是 GraphObserver 的物件個體。但是儲存在 observers 欄位的物件個體知道有實作 Observer 介面。因為這些物件個體是以 addObserver 新增而來，所以一定會實作 Observer 介面，也絕對能呼叫 update 方法。&lt;/p&gt;
&lt;p&gt;而 DigitalObserver 類別也不會去注意自己所觀察的是 RandomNumberGenerator 還是其它 XXXXNumberGenerator 的物件個體。不過仍然知道這是 NumberGenerator 的子類別的物件個體，而且具有 getNumber 方法。&lt;/p&gt;
&lt;p&gt;只要設計如下，就能達到以上的效果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先利用抽象類別和介面從實際類別抽出抽象方法&lt;/li&gt;
&lt;li&gt;當以引數傳遞物件個體或將物件個體儲存在欄位時，把它設成抽象類別或介面的型別，不要寫成實際的型別&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;當Observer 的行為會影響 Subject 的時候&lt;/h3&gt;
&lt;p&gt;Subject 發生變化，然後通知 Observer，Observer 再呼叫 Subject 的方法。這是 Observer Pattern 一般的情況，假設 Observer 呼叫 Subject 的方法時，同時也會影響到 Subject 的狀態，那麼又要再通知 Observer，然後再...，這樣反而會一直在呼叫方法。解決方式就是在 Observer 中加一個旗標變數來表示&lt;strong&gt;目前是否有 Subject 的通知&lt;/strong&gt;即可。&lt;/p&gt;
&lt;h3&gt;通知的意義重於觀察&lt;/h3&gt;
&lt;p&gt;雖然 observer 是叫作&lt;strong&gt;觀察者&lt;/strong&gt;，但實際上它是被動等待 Subject 的通知。Observer Pattern 又可稱為 Publish-Subscribe Pattern。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;1. 建立一個子類別 IncrementalNumberGenerator，讓它擴充 NumberGenerator 類別並逐一加計數值的功能。其建構子有下列三個引數:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;開始的數值&lt;/li&gt;
&lt;li&gt;結束的數值&lt;/li&gt;
&lt;li&gt;增加幅度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，要讓　DigitalObserver 及　GraphObserver 類別觀察其動作。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IncrementalNumberGenerator&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;NumberGenerator&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;                     &lt;span class="c1"&gt;// 目前數值&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;                        &lt;span class="c1"&gt;// 結束數值（不含此值）&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;                        &lt;span class="c1"&gt;// 增加若干&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;IncrementalNumberGenerator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getNumber&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                &lt;span class="c1"&gt;// 取得數值&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;notifyObservers&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Main 類別。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NumberGenerator&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IncrementalNumberGenerator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; 
        &lt;span class="n"&gt;Observer&lt;/span&gt; &lt;span class="n"&gt;observer1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DigitObserver&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Observer&lt;/span&gt; &lt;span class="n"&gt;observer2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GraphObserver&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addObserver&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observer1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addObserver&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observer2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2. 新增一個　ConcreteObserver 參與者。&lt;/h4&gt;
&lt;p&gt;建立一個圓餅圖的 ConcreteObserver。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/1fd95a6801c7f161f21b.js"&gt;&lt;/script&gt;</summary></entry><entry><title>Prototype Pattern -- 複製建立物件個體</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/prototype.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/prototype.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;如果利用 new 建立物件個體時，都必須指定類別名稱。但有時候會需要不靠指定類別名稱的方式就能產生物件個體，此時不是利用類別建立物件個體，而是複製物件個體另建一個新物件個體，通常發生在以下的情況：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;種類過多無法整成類別時: 
若需處理的物件種類太多，如果要一個個設定成不同的類別，需要產生大量的原始檔。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不容易利用類別產生物件個體時:
該物件個體的產生過程太複雜，很難利用類別來建立。假設現在有一個物件個體是使用者在圖形編輯軟體下利用滑鼠操作而產生。要想以程式來產生這樣一個原本是使用者操作所建立的物件個體，其實不容易。如果是在已經有一個以使用者操作的方式產生的物件個體，還想再建立一個相同物件個體的情形時，應該先把已產生的物件個體暫時儲存起來，等到需要產生時再複製即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3.希望把框架和所產生的物件個體分開時:
希望讓產生物件個體時的框架不會只存在在某些特殊類別時。遇到這種情形時，就不能沿用指定類別名稱產生物件個體的作法，應該預先把用來當作&lt;strong&gt;雛型&lt;/strong&gt;的物件個體登錄進去，再以複製已登錄物件個體的方式來產生物件個體。&lt;/p&gt;
&lt;p&gt;從一個現有的物件個體建立另外一個新物件個體有點像是到麵包店指著玻璃櫃的某種甜點，跟老闆說&lt;strong&gt;我要這個&lt;/strong&gt;的感覺。雖然不知道甜點叫什麼名字，也不知道這種甜點的作法，但只要一指眼前的甜點，還是可以買到跟&lt;strong&gt;這個&lt;/strong&gt;相同的東西。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;不是利用類別產生物件個體，而是從一個物件個體產生出另外一個新物件個體。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;為字串設計外框。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/515d53540f78886bdebb.js"&gt;&lt;/script&gt;

&lt;h4&gt;Prototype 參與者&lt;/h4&gt;
&lt;p&gt;Prototype 規定複製物件個體再建立新物件個體的方法。例如 Product 介面。&lt;/p&gt;
&lt;h4&gt;ConcreteProduct 參與者&lt;/h4&gt;
&lt;p&gt;ConcreteProduct 是實際上實作先複製物件個體再建立新物件個體的方法。例如 MessageBox 以及 UnderlinePen 類別。&lt;/p&gt;
&lt;h4&gt;Client 參與者&lt;/h4&gt;
&lt;p&gt;Client 利用複製物件個體的方法以產生另外一個新物件個體，例如 Manager 類別。&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;p&gt;Prototype Pattern 有效解決以下三種情形。&lt;/p&gt;
&lt;h4&gt;種類過多無法整合成類別時&lt;/h4&gt;
&lt;p&gt;程式範例列出了下面三種雛型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以'~'把字串加上底線&lt;/li&gt;
&lt;li&gt;以'*'把字串加上外框&lt;/li&gt;
&lt;li&gt;以'/'把字串加上外框&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;日後還可能再增加更多雛型，如果全部都要做成不同的類別，類別數量會很可觀，增加管理程式原始碼的難度。&lt;/p&gt;
&lt;h4&gt;不容易利用類別產生物件個體時&lt;/h4&gt;
&lt;p&gt;假設有一個表示原本以人工操作之圖形的物件個體，而現在要建立一個完全相同的新物體，利用物件個體複製的方式，就輕鬆很多。&lt;/p&gt;
&lt;h4&gt;不容易利用類別產生物件個體時&lt;/h4&gt;
&lt;p&gt;把執行物件個體的複製放在 framework package 中。&lt;/p&gt;
&lt;p&gt;產生物件個體時不以類別名稱傳遞，例如，以 &lt;strong&gt;strong message&lt;/strong&gt; 取代。這可以說是讓框架脫離類別的束縛。&lt;/p&gt;</summary></entry><entry><title>Proxy Pattern</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/proxy.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/proxy.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;proxy就是代理人的意思，不需要本人親自去做的事情，就交給代理人去做。代理人是代替忙到無法自己動手的本人去處理工作。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;代理人以及本人都是物件。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;這次的範例是一個把字串輸出到畫面上的列表機。由 Main 類別產生 PrinterProxy 類別的物件個體。 該物件命名為 Alice，並將此名稱輸出到畫面上。 然後改名為Bob， 且輸出該新名稱。 在命名和取得名稱的階段都還沒有產生真正的 Printer 類別(就是本人個體)，命名和取得名稱的部份由 PrinterProxy 代理執行，&lt;strong&gt;最後呼叫 print 方法進入真正執行列印的階段，才由 PrinterProxy 類別產生 Printer 類別的物件個體&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;PrinterProxy 以及 Printer 類別要一視同仁，故須定義 Printable Interface。&lt;/p&gt;
&lt;p&gt;這個程式範例的前提要件是產生 Printer 類別的物件個體會花很多時間。 為了表現出費時的感覺，所以從建構子故意呼叫 heavyJob 方法。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/1672d63393eb403671f0.js"&gt;&lt;/script&gt;

&lt;h4&gt;Subject 參與者&lt;/h4&gt;
&lt;p&gt;規定對 Proxy 參與者和 RealSubject 參與者 一視同仁的API。因為已經有 Subject 參與者，所以 Client 參與者不需要去注意 Proxy 參與者跟 RealSubject 參與者有什麼差異。 例如 Printable Interface。&lt;/p&gt;
&lt;h4&gt;Proxy 參與者&lt;/h4&gt;
&lt;p&gt;Proxy 參與者會盡量處理 Client 參與者的要求。當自己無法單獨處理時，Proxy 參與者便會把工作交給 RealSubject 參與者。 要等到真正需要用到 RealSubject 參與者時， Proxy 參與者才會產生 RealSubject 參與者。 Proxy 參與者是實作 Subject 參與者規定的 API。 例如 PrinterProxy 類別。&lt;/p&gt;
&lt;h4&gt;RealSubject 參與者&lt;/h4&gt;
&lt;p&gt;當代理人束手無策的時候，就輪到本人 RealSubject 自己上場。這個參與者跟 Proxy 參與者同樣都要實作 Subject 參與者規定的 API。例如 Printer 類別。&lt;/p&gt;
&lt;h4&gt;Client 參與者&lt;/h4&gt;
&lt;p&gt;利用 Proxy Pattern 的參與者，例如 Main 類別。&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;h4&gt;利用代理人提高處理速度&lt;/h4&gt;
&lt;p&gt;在 Proxy Pattern 當中，Proxy 發揮代理人的功能盡力處理代理的工作。例如，在城市範例中利用 Proxy 可以把較重的處理(產生物件個體)往後延遲到實際 print 為止。&lt;/p&gt;
&lt;p&gt;假設這是一個大型系統，裡面大多數的功能在初始化都要花很多時間。在啟動的時候，所有功能都要全面初始化的時候，當然會連帶影響到應用軟體也要花很多時間才能啟動。&lt;strong&gt;把程式設計成到了實際要使用某種功能的階段才初始化該功能較好&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如，想要產生圖形物件時，讀取圖檔會很花時間，所以每次開啟文件都要產生圖形物件就會浪費時間。其實等到圖形物件要輸出到畫面上時再去產生會比較好。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;請把 PrinterProxy 類別修改成即使 PrinterProxy 類別不知道 Printer 類別也沒有影響。&lt;/h4&gt;
&lt;p&gt;這樣處裡之後，PrinterProxy 類別就是獨立在 Printer 類別之外的零件，可以對所有實作 Printable 介面的類別扮演 Proxy。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PrinterProxy&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Printable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;            &lt;span class="c1"&gt;// 名稱&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Printable&lt;/span&gt; &lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;         &lt;span class="c1"&gt;// 「本人」&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;// 「本人」的類別名稱&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;PrinterProxy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;      &lt;span class="c1"&gt;// 建構子&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;                                                 
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setPrinterName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// 命名&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;real&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setPrinterName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;//「本人」也要命名&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getPrinterName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;// 取得名稱&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// 輸出到畫面上&lt;/span&gt;
        &lt;span class="n"&gt;realize&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;realize&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;   &lt;span class="c1"&gt;// 產生「本人」&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;real&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                                                                       
                &lt;span class="n"&gt;real&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Printable&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;newInstance&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;               
                &lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setPrinterName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;                                              
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ClassNotFoundException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                                        
                &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;找不到類別 &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;className&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;。&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;      
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                                                     
                &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;                                                    
            &lt;span class="o"&gt;}&lt;/span&gt;                                                                           
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改 Main 類別。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Printable&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PrinterProxy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Printer&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;                 
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;現在的名稱是&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPrinterName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;。&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setPrinterName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;現在的名稱是&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPrinterName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;。&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Singleton Pattern -- 唯一的物件個體</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/singleton.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/singleton.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;通常我們在啟動程式時，就會產生許多物件個體。拿代表字串的 java.lang.String 類別物件個體來說，每個字串都會相對產生一個，所以如果某個程式內含 1000 個字串，就會產生 1000 個物件個體。&lt;/p&gt;
&lt;p&gt;不過，有時候難免會有 &lt;strong&gt;讓這個類別的物件個體只產生一個&lt;/strong&gt; 的需要，像是用程式來表現在程式中絕對是獨一無二的某個部份。好比說，表現電腦的類別或是表現視窗系統的類別等等就是最經典的例子。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;Singleton 是指只有一個元素的集合，就是因為它只會有一個物件個體。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;設計一個只有一個物件個體的類別。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/3339031996aa824bc3c4.js"&gt;&lt;/script&gt;

&lt;h4&gt;Singleton 參與者&lt;/h4&gt;
&lt;p&gt;Singleton Pattern 只出現一個 Singleton 參與者。 Singleton 的參與者具有 static 方法可取得唯一的物件個體。這個方法永遠都會傳回同一個物件個體。&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;p&gt;在很多情況下，如果有一個以上的物件個體時，由於物件個體彼此之間的影響，可能會發展成出乎意料的 bug。Singleton Pattern 確保程式設計師不會不小心多產生物件。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;1.將Singleton Pattern 套用到 TicketMaker 類別。&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TicketMaker&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ticket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getNextTicketNumber&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ticket&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;目的是為了只保有唯一的一個 TicketMaker。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/9dd80369fcd5aafa4453.js"&gt;&lt;/script&gt;

&lt;h4&gt;2.請自製一個物件個體數目只能有3個的類別 Triple。假設所有物件個體都要加上編號，且利用 getInstance(int id)可取得編號 id 的物件個體。&lt;/h4&gt;
&lt;p&gt;重點是做一個 static array。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/7dc40041251e218d94f0.js"&gt;&lt;/script&gt;

&lt;h4&gt;3.以下嚴格來說不能算是一個 Singleton Pattern，為什麼?&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;已產生物件個體。&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因為在多執行緒的狀態下，呼叫 getInstance 可能會產生多個物件。
例如：
&lt;script src="https://gist.github.com/twmht/f14ef82669d41b855546.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;在 getInstance 方法前加上 synchronized 即可解決。&lt;/p&gt;</summary></entry><entry><title>State Pattern</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/state.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/state.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;用類別來表示 "狀態" 。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;以類別來表示狀態之後，只要切換類別就能表現 "狀態變化"，而且在必須新增其它狀態時，也很清楚該編寫哪個部份。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;假設現在有一個會隨著時間改變警備狀態的金庫保全系統：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有一個金庫&lt;/li&gt;
&lt;li&gt;金庫有跟保全中心連線&lt;/li&gt;
&lt;li&gt;金庫有警鈴和一般通話用的電話&lt;/li&gt;
&lt;li&gt;金庫有時鐘，監視目前的時間&lt;/li&gt;
&lt;li&gt;白天是9:00-16:59，晚間為17:00-23:59以及0:00-8:59&lt;/li&gt;
&lt;li&gt;只有白天才能使用金庫&lt;/li&gt;
&lt;li&gt;在白天使用金庫時，保全中心會保留使用紀錄&lt;/li&gt;
&lt;li&gt;若晚間使用金庫時，保全中心會接到發生異常現象的通知&lt;/li&gt;
&lt;li&gt;警鈴是24小時都可以使用&lt;/li&gt;
&lt;li&gt;一旦使用警鈴，保全中心會接收到警鈴通知&lt;/li&gt;
&lt;li&gt;一般通話用的電話是24小時都可以使用(但晚間只有答錄機服務)&lt;/li&gt;
&lt;li&gt;在白天使用電話時，就會呼叫保全中心&lt;/li&gt;
&lt;li&gt;若晚間使用電話時，則會呼叫保全中心的答錄機&lt;/li&gt;
&lt;/ul&gt;
&lt;script src="https://gist.github.com/twmht/a04e437a923e01314421.js"&gt;&lt;/script&gt;

&lt;h4&gt;State 參與者&lt;/h4&gt;
&lt;p&gt;State 表示狀態。規定不同狀態下做不同處理的介面。這個介面等於是一個不同狀態所做處理的所有方法的集合。例如 State 介面。&lt;/p&gt;
&lt;h4&gt;ConcreteState 參與者&lt;/h4&gt;
&lt;p&gt;ConcreteState 是表示具體的不同狀態，具體實作在 State 所規定的介面。例如 DayState 以及 NightState 類別。&lt;/p&gt;
&lt;h4&gt;Context 參與者&lt;/h4&gt;
&lt;p&gt;Context 具有表示現在狀態的 ConcreteState，而且還規定 State Pattern 的利用者所需要的介面。例如 Context 介面以及 SafeFrame 類別。
Context 介面負責規定介面的部份，SafeFrame 類別則負責具有 ConcreteState 參與者的部份。&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;h4&gt;Divide and Conquer&lt;/h4&gt;
&lt;p&gt;State Pattern 是以&lt;strong&gt;類別&lt;/strong&gt;來表示&lt;strong&gt;狀態&lt;/strong&gt;。利用不同的類別分別表示各種具體狀態的動作就是在分割問題。當在寫某一個 ConcreteState 時，可以讓自己以為沒有其他類別，彷彿獨立開來一樣。&lt;/p&gt;
&lt;p&gt;如果不用這個 Pattern 的話，使用金庫時所呼叫的方法就得根據現在的狀態進行處理。狀態種類愈多，條件判斷就愈多;況且所有發生時所呼叫的所有方法都要寫同樣的條件判斷處理。&lt;/p&gt;
&lt;p&gt;因為 State Pattern 是用類別來表示系統&lt;strong&gt;狀態&lt;/strong&gt;，所以才能細細分割一個龐大複雜的程式。&lt;/p&gt;
&lt;h4&gt;有該狀態才會有的處理&lt;/h4&gt;
&lt;p&gt;SafeFrame 類別的 setClock 方法是被 Main 類別呼叫出來。Main 類別呼叫 setClock 方法說&lt;em&gt;請設定時間&lt;/em&gt;。在 setClock 方法中，這個處理委讓給 state，也就是說，設定時間被當作一個&lt;strong&gt;有現在的狀態才會有的處理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;不只是 doClock 方法，State 介面所宣告的方法都是&lt;strong&gt;有該狀態才會有的處理&lt;/strong&gt;，其實就是&lt;strong&gt;因狀態而異的處理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;可以以下面兩點為基礎設計:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;宣告成抽象方法，作為介面&lt;/li&gt;
&lt;li&gt;實作成具體方法，作為不同的類別&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;不會有自我矛盾&lt;/h4&gt;
&lt;p&gt;如果不用這個 Pattern，改以多個變數之值的集合來表示系統狀態，這時候變數值之間不能有自我矛盾或不一致的情形。&lt;/p&gt;
&lt;p&gt;State Pattern 中，表示現在狀態的變數只有一個(SafeFrame 類別中的 state 變數)。因此不會有自我矛盾的情形。&lt;/p&gt;
&lt;h4&gt;新增狀態很容易&lt;/h4&gt;
&lt;p&gt;新增狀態非常簡單。不過，如果想在已經完成的 State Pattern 中新增一個&lt;strong&gt;有狀態才會有的處理&lt;/strong&gt;就沒那麼容易。因為這個新增的動作代表了要在 State 參與者的介面新增其他方法的意思，而且所有的 ConcreteState 都要新增這個處理。&lt;/p&gt;
&lt;p&gt;雖然這個動作有點困難，但卻不用擔心會不小心忘記新增，因為編譯器會自動報錯。比起不用State Pattern，而用大量的 if 條件敘述要好用的多。&lt;/p&gt;
&lt;h3&gt;多樣的物件個體&lt;/h3&gt;
&lt;p&gt;SafeFrame 類別中出現了下面兩種敘述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 SafeFrame 建構子內: buttonUse.addActionListener(this);&lt;/li&gt;
&lt;li&gt;在 actionPerformed 方法內: state.doUse(this)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;兩個 this 都是 SafeFrame 類別的物件個體。因為只會產生一個 SafeFrame 的物個體，因此這兩個 this 為同值。&lt;/p&gt;
&lt;p&gt;在傳遞給 addActionListener 方法時，這個物件個體被視為&lt;strong&gt;實作 ActionListener 介面之類別的物件個體&lt;/strong&gt;。因為 addActionListener 方法的引數是 ActionListener 型態。在 addActionListener 方法中，引數的使用範圍是在&lt;strong&gt;ActionListener 介面所規定的方法的範圍之內&lt;/strong&gt;。傳遞過來做為引數的是不是 SafeFrame 的物件個體根本不重要。&lt;/p&gt;
&lt;p&gt;而在傳遞給 doUse 方法的時候，同樣的物件個體卻被視為&lt;strong&gt;實作 Context 介面之類別的物件個體&lt;/strong&gt;。因為 doUse 方法的引數是 Context 型態。在 doUse 方法中，&lt;strong&gt;引數的使用範圍是在 Context 介面所規定方法的範圍之內&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;1. 理論上，Context 應該要設成抽象類別而非介面，而 state 欄位應該要規類到 Context 類別才符合 Pattern 的主旨，但是程式範例卻把 Context 設成介面，而 state 欄位則是放在 SafeFrame 類別，為什麼?&lt;/h4&gt;
&lt;p&gt;由於 Java 是單一繼承，因此如果以類別表示 Context 的話，就不能再把已經是 Frame 的子類別之 SafeFrame 類別設為 Context 類別的子類別。&lt;/p&gt;
&lt;p&gt;如果要做的話，應該要另外作一個 Context 類別的子類別，將其物件個體儲存在 SafeFrame 的欄位，用委讓的方式去做。&lt;/p&gt;
&lt;h4&gt;2. 如果想把範例程式中的白天改成 8:00-20.59，而晚間改成 21:00~23:59 和 0:00~7:59。該如何修改?&lt;/h4&gt;
&lt;p&gt;需要修改 DayState 和 NightState 類別的 doClock 方法。&lt;/p&gt;
&lt;p&gt;如果一開始先在 SafeFrame 類別建立 isDay 方法和 isNight 方法，預先準備好檢查目前時間是白天還是夜晚的方式，就能把具體的時間範圍放到 SafeFrame 類別之內。這樣之後就只要修改 SafeFrame 類別即可。&lt;/p&gt;
&lt;h4&gt;3. 請加入 &lt;strong&gt;午餐時間&lt;/strong&gt;(12:00~12:59) 這個新狀態。若午餐時間使用金庫，則保全中心會接到發生異常狀態的通知;若使用警鈴，則保全中心會接到警鈴通知，若使用電話，則會呼叫保全中心的答錄機。&lt;/h4&gt;
&lt;p&gt;新增一個 NoonState 類別。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NoonState&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;NoonState&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NoonState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;NoonState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                                &lt;span class="c1"&gt;// 建構子為private&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                 &lt;span class="c1"&gt;// 取得唯一的個體&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doClock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;// 設定時間&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;changeState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NightState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;changeState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DayState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doUse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                &lt;span class="c1"&gt;// 使用金庫&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;callSecurityCenter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;異常：午餐時間使用金庫！&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doAlarm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;              &lt;span class="c1"&gt;// 警鈴&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;callSecurityCenter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;警鈴(午餐時間)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doPhone&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;              &lt;span class="c1"&gt;// 一般通話&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recordLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;午餐時間的通話錄音&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                          &lt;span class="c1"&gt;// 輸出字串&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[午餐時間]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DayState 的 doClock 方法都要修改。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DayState&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;DayState&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DayState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;DayState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                                &lt;span class="c1"&gt;// 建構子為private&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                 &lt;span class="c1"&gt;// 取得唯一的個體&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doClock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;// 設定時間&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;changeState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NightState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                   
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;changeState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NoonState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;       
        &lt;span class="o"&gt;}&lt;/span&gt;                                                       
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doUse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                &lt;span class="c1"&gt;// 使用金庫&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recordLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;使用金庫(白天)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doAlarm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;              &lt;span class="c1"&gt;// 警鈴&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;callSecurityCenter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;警鈴(白天)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doPhone&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;              &lt;span class="c1"&gt;// 一般通話&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;callSecurityCenter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;一般的通話(白天)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                          &lt;span class="c1"&gt;// 輸出字串&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[白天]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NightState 類別的 doClock 方法都要修改。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NightState&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;NightState&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NightState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;NightState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                              &lt;span class="c1"&gt;// 建構子為private&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                 &lt;span class="c1"&gt;// 取得唯一的個體&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doClock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;// 設定時間&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;changeState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DayState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                   
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;changeState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NoonState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;       
        &lt;span class="o"&gt;}&lt;/span&gt;                                                       
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doUse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                &lt;span class="c1"&gt;// 使用金庫&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;callSecurityCenter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;異常：晚間使用金庫！&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doAlarm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;              &lt;span class="c1"&gt;// 警鈴&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;callSecurityCenter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;警鈴(晚間)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doPhone&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;              &lt;span class="c1"&gt;// 一般通話&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recordLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;晚間的通話錄音&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                          &lt;span class="c1"&gt;// 輸出字串&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[晚間]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;3. 請加入&lt;strong&gt;緊急&lt;/strong&gt;這個新狀態。當按下警鈴時，無論任何時間，狀態立刻切換到緊急狀態。若緊急狀態時使用金庫，則保全中心接到緊急狀況通知;若使用警鈴，則保全中心會接到警鈴通知;若使用電話，則會呼叫保全中心。&lt;/h4&gt;
&lt;p&gt;這個規格的問題在於發生異常之後，沒有可以回到原來狀態的方式。&lt;/p&gt;
&lt;p&gt;新增一個 UrgentState 類別。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UrgentState&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;UrgentState&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;UrgentState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;UrgentState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                                &lt;span class="c1"&gt;// 建構子為private&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                 &lt;span class="c1"&gt;// 取得唯一的個體&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doClock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;// 設定時間&lt;/span&gt;
        &lt;span class="c1"&gt;// 設定時間的部分不做處理&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;                                                                   
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doUse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                &lt;span class="c1"&gt;// 使用金庫&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;callSecurityCenter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;異常：異常使用金庫！&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doAlarm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;              &lt;span class="c1"&gt;// 警鈴&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;callSecurityCenter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;警鈴(異常)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doPhone&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;              &lt;span class="c1"&gt;// 一般通話&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;callSecurityCenter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;一般的通話(異常)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                          &lt;span class="c1"&gt;// 輸出字串&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[異常]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改 DayState 類別的 doAlarm 方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DayState&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;DayState&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DayState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;DayState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                                &lt;span class="c1"&gt;// 建構子為private&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                 &lt;span class="c1"&gt;// 取得唯一的個體&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doClock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;// 設定時間&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;changeState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NightState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doUse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                &lt;span class="c1"&gt;// 使用金庫&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recordLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;使用金庫(白天)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doAlarm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;              &lt;span class="c1"&gt;// 警鈴&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;callSecurityCenter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;警鈴(白天)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;changeState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UrgentState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; 
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doPhone&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;              &lt;span class="c1"&gt;// 一般通話&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;callSecurityCenter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;一般的通話(白天)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                          &lt;span class="c1"&gt;// 輸出字串&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[白天]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改 NightState 的 doAlarm 方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NightState&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;NightState&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NightState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;NightState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                              &lt;span class="c1"&gt;// 建構子為private&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                 &lt;span class="c1"&gt;// 取得唯一的個體&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doClock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;// 設定時間&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;changeState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DayState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doUse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                &lt;span class="c1"&gt;// 使用金庫&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;callSecurityCenter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;異常：晚間使用金庫！&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doAlarm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;              &lt;span class="c1"&gt;// 警鈴&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;callSecurityCenter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;警鈴(晚間)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;changeState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UrgentState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; 
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doPhone&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;              &lt;span class="c1"&gt;// 一般通話&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recordLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;晚間的通話錄音&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                          &lt;span class="c1"&gt;// 輸出字串&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[晚間]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Strategy Pattern -- 把演算法則整個換掉</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/strategy.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/strategy.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;strategy 是 "戰略" 的意思，泛指與敵方對峙時的作戰策略以及解決問題的方法等。在程式設計裡，不妨把它視為 "運算法則"。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;任何一種程式都是為了解決問題而撰寫出來，解決問題時需要實作一些特定的運算法則。在 Strategy Pattern 之下，可以更換實作運算法則的部份而且不留痕跡。切換整個運算法則，簡化改採其它方法來解決同樣問題的動作。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;設計電腦遊戲 "剪刀石頭布"。猜拳時的設略有兩種方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;猜贏之後繼續出同樣的招式 (WinningStrategy)。&lt;/li&gt;
&lt;li&gt;從上一次出的招式，以機率分配方式求出下一個招式的機率 (ProbStrategy)。&lt;/li&gt;
&lt;/ul&gt;
&lt;script src="https://gist.github.com/twmht/93e49c329294c68aa552.js"&gt;&lt;/script&gt;

&lt;h4&gt;Strategy 參與者&lt;/h4&gt;
&lt;p&gt;規定使用戰略之介面的參與者。例如 Strategy 介面。&lt;/p&gt;
&lt;h4&gt;ConcreteStrategy 參與者&lt;/h4&gt;
&lt;p&gt;實作 Strategy 參與者之介面的參與者。這裡會實際編寫有關具體戰略的程式。例如 WinningStrategy 類別和 ProbStrategy 類別。&lt;/p&gt;
&lt;h4&gt;Context (文法) 參與者&lt;/h4&gt;
&lt;p&gt;利用 Strategy 參與者的參與者。它有 ConcreteStrategy 參與者的物件個體，如有必要時則可使用 (最多只能呼叫 Strategy 參與者的介面)。例如 Player 類別。&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;p&gt;我們比較習慣把實作運算法則這個部份結合到方法裡面。但是 Strategy Pattern 則故意把運算法則的部份跟其他部份分開。只規定跟運算法則有關的介面的部份，然後再從程式這邊以委讓的方式來利用運算法則。&lt;/p&gt;
&lt;p&gt;假設現在我們想改良運算法則提高速度，只需要注意不要去修改到 Strategy 的介面，然後再改 ConcreteStrategy 就行。而且它所使用的委讓又是說分就分的關係，所以很容易就切換運算法則。舉例來說，假設想比較一下原始運算法則跟改良後的運算法則兩者的速度時，只要動手切換一下就能測得出來。&lt;/p&gt;
&lt;p&gt;即使這個程式是一個象棋遊戲，只要使用 Strategy Pattern 的話，還能配合使用者選擇的參與者切換思考模式等級。&lt;/p&gt;
&lt;h4&gt;執行時也能切換&lt;/h4&gt;
&lt;p&gt;可在程式執行中直接切換 ConcreteStrategy。例如若電腦記憶體不夠時，就切換為節省記憶的 Strategy，若足夠時，則切換為較快但較耗費記憶體的 Strategy。&lt;/p&gt;
&lt;p&gt;當然也可以用甲方的運算法則來&lt;strong&gt;驗算&lt;/strong&gt;乙方的運算法則。假設現在想用一個試算表軟體的除錯版，進行高複雜度的運算。此時，只要手邊同時有&lt;strong&gt;可能還有 bug 的高速運算法則&lt;/strong&gt;和&lt;strong&gt;可保證計算正確的低速運算法則&lt;/strong&gt;，就可能利用後者去驗算前者。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;1. 建立一個隨便決定下一個猜拳手勢的 RandomStrategy 類別。&lt;/h4&gt;
&lt;script src="https://gist.github.com/twmht/35e6dc1700439247ab23.js"&gt;&lt;/script&gt;

&lt;h4&gt;2. 以下程式為進行字串排序的類別與介面。使用的是 insertion sort。請配合 Sorter 的介面，建立一個可表示其他運算法則的類別。&lt;/h4&gt;
&lt;script src="https://gist.github.com/twmht/96fcf5fb58e784695574.js"&gt;&lt;/script&gt;

&lt;p&gt;可加入 QuickSort。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/2a9f59f054e0935de7e1.js"&gt;&lt;/script&gt;</summary></entry><entry><title>Template Method Pattern -- 實際處理交給子類別</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/templateMethod.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/templateMethod.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;就像在塑膠版上挖空，然後用色筆塗滿挖空的部份，所表現出來的是固定的字型，但顏色卻因所使用的色筆顏色而異。所挖空的部份我們稱為 Template。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;將作為 Template 的方法定義在父類別，而方法的定義中則使用到抽象方法。因此如果只看父類別部份的程式，根本不知道到底結果會是怎樣的處理內容，最多只能了解該如何呼叫抽象方法而已。&lt;/p&gt;
&lt;p&gt;實際實作抽象方法的是子類別。要在子類別實作方法，才能決定具體的處理動作。理論上，如果在不同的子類別執行不同的實作，應該就能發展出不同的處理內容。不過，無論在哪個子類別執行任何一種實作，處理的大致流程都還是要依照父類別所制定的方法。&lt;/p&gt;
&lt;p&gt;像這樣在&lt;strong&gt;在父類別指定大綱並且在子類別規定具體內容&lt;/strong&gt;，就稱為 Template Method Pattern。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;輸出字串，同樣流程的display，卻有不同的輸出方式(字串或字元)。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/b29a5df581fcd2090243.js"&gt;&lt;/script&gt;

&lt;h4&gt;AbstractClass (抽象類別) 參與者&lt;/h4&gt;
&lt;p&gt;AbstractClass 實作範本方法，還有宣告 Template Method 所使用的抽象方法。這個抽象方法則由子類別 ConcreteClass 負責實作。例如 AbstractClass 類別。&lt;/p&gt;
&lt;h4&gt;ConcreteClass (具象類別) 參與者&lt;/h4&gt;
&lt;p&gt;具體實作 AbstractClass 所定義的抽象方法，這裡所實作的方法是從 AbstractClass 的範本方法(display 方法)呼叫出來。例如 CharDisplay 和 StringDisplay 類別。&lt;/p&gt;
&lt;h3&gt;實際例子&lt;/h3&gt;
&lt;p&gt;在java.io.InputStream 的子類別進行實作的方法是 java.io.InputStream 的 read() 方法。read() 方法則被 java.io.InputStream 的範本方法 read(byte[] b,int off,int len) 反覆呼叫出來。&lt;/p&gt;
&lt;p&gt;換句話說，&lt;strong&gt;讀取1 byte&lt;/strong&gt; 這個處理的具體內容是交給子類別，在java.io.InputStream 這端則產生 &lt;strong&gt;將指定 byte 讀入到陣列的指定位置&lt;/strong&gt;之處理的範本方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Template Method Pattern&lt;/strong&gt;不容許使用介面，因為介面是全部方法都是抽象，而抽象類別允許部份方法抽象。&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;h4&gt;邏輯可共用&lt;/h4&gt;
&lt;p&gt;因為在父類別的範本方法已經敘述了演算法則，所以子類別這邊就不需要重新逐一敘述演算法則。&lt;/p&gt;
&lt;p&gt;假設現在故意不用 Template Method Pattern，只利用編輯器的剪貼功能來建立多個 ConcreteClass 參與者。可是後來發現其中一個 ConcreteClass 有一個 bug 時，只修改一個 bug 並沒有辦法反應到所有的 ConcreteClass 上。&lt;/p&gt;
&lt;p&gt;從這個角度來看，如果利用 Template Method Pattern 來寫程式的話，當你發現範本方法裡面有錯誤時，只要修改這個範本方法即可。&lt;/p&gt;
&lt;h4&gt;父類別跟子類別的連續動作&lt;/h4&gt;
&lt;p&gt;在 Template Method Pattern 中，父類別跟子類別之間的聯絡互動相當緊密。因此如果要在子類別實際實作一個已經在父類別宣告過的抽象方法時，必須先了解應該在哪個時間點呼叫這個抽象方法。要是沒有父類別的原始程式碼，恐怕子類別的實作會是一個高難度的跳戰。&lt;/p&gt;
&lt;h4&gt;子類別應視同父類別&lt;/h4&gt;
&lt;p&gt;例如 CharDisplay 的物件個體和 StringDisplay 的物件個體都先指定到 AbstractClass 型態的變數，然後才呼叫 display 範本方法。&lt;/p&gt;
&lt;p&gt;假設現在有一個父類別型態的變數，子類別的物件個體也被指定到該變數。此時，程式最好利用 instanceof 等寫成無論子類別種類為何，程式都能正常運作。&lt;/p&gt;
&lt;p&gt;無論父類別型態的變數指定哪一個子類別的物件個體都能正常動作的原則稱為 &lt;strong&gt;The Liskov Substituion Principle&lt;/strong&gt;，LSP 是繼承相關的一般性原則。&lt;/p&gt;
&lt;h3&gt;類別階層與抽象類別&lt;/h3&gt;
&lt;h4&gt;父類別對子類別的要求&lt;/h4&gt;
&lt;p&gt;我們在學習類別階層時，通常都是從子類別的角度來思考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在子類別可利用父類別中所定義的方法&lt;/li&gt;
&lt;li&gt;子類別只要寫一點點方法就可以新增其他功能&lt;/li&gt;
&lt;li&gt;在子類別 override 方法就能修改程式動作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在這裡可以改變一下觀點，從父類別的角度來想。假設現在父類別已經宣告了抽象方法。此時，這個方法的實作要&lt;strong&gt;全權交給子類別&lt;/strong&gt;。也就是說，當你在宣告抽象方法時，事實上是在程式中表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;期待子類別會實作這個方法&lt;/li&gt;
&lt;li&gt;要求子類別要實作這個方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你也可以把它解釋成子類別產生一個需要實作在父類別所宣告的抽象方法的責任。這稱為 subclass responsibility。&lt;/p&gt;
&lt;h4&gt;抽象類別的意義&lt;/h4&gt;
&lt;p&gt;因為抽象方法裡面沒有方法的主體，所以無法得知具體的處理內容。但是，它可以決定方法名稱並且利用範本方法來敘述處理的內容。實際的處理內容當然要留給子類別確定，&lt;strong&gt;不過在抽象類別的階段就先抓出處理流程的型態也很重要&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;父類別跟子類別之間的協調&lt;/h4&gt;
&lt;p&gt;在設計一個程式時，必須不斷協調父類別和子類別兩邊。如果增加父類別這邊的敘述，就可以減輕在子類別的負擔，但是相對地也會降低子類別自由發揮的空間。反過來，如果減少父類別的敘述時，子類別這邊的敘述就會比較棘手，可能會發生不同子類別出現同樣處理的敘述內容。&lt;/p&gt;
&lt;p&gt;Template Method Pattern 則是在父類別敘述處理的骨架，把具體的外觀肉體留給子類別來做。至於應該怎麼分配，則是程式設計師的工作了。&lt;/p&gt;</summary></entry><entry><title>Visitor Pattern -- 在結構中穿梭還同時做事</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/visitor.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/visitor.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;資料結構裡儲存了很多個元素，假設現在要對所有元素進行一項 &lt;strong&gt;處理&lt;/strong&gt;。那麼，這項 &lt;strong&gt;處理&lt;/strong&gt; 的程式碼應該寫在哪裡？以常理來判斷，應該要寫在表示資料結構的類別裡面，不過如果這項 &lt;strong&gt;處理&lt;/strong&gt; 的動作不只一個的話，該怎麼辦? 每次要做新處理的時候，就必須修改資料結構的類別。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;Visitor Pattern 把 &lt;strong&gt;資料結構&lt;/strong&gt; 和 &lt;strong&gt;處理&lt;/strong&gt; 兩者分開，另外寫一個表示在資料結構內穿梭來去的主體 &lt;strong&gt;訪客&lt;/strong&gt; 的類別，然後把處理交給這個類別來進行。如此一來，如果想追加新的處理動作時，只要再建立一個新的訪客即可。而在資料結構這邊，也只要能接受來敲門的訪客就能完成動作。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;這個程式是訪客穿梭在由檔案和目錄組成的資料結構內，以列印檔案總覽。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/4ff936559e5bf100a3d1.js"&gt;&lt;/script&gt;

&lt;h4&gt;Visitor (訪客) 參與者&lt;/h4&gt;
&lt;p&gt;Visitor 是對每個資料結構中的具體元素 (ConcreteAcceptor) 宣告 &lt;strong&gt;已經去找過XXXX&lt;/strong&gt; 的 visit(XXXX) 方法。visit(XXXX) 是處理 XXXX 的方法，實際原始碼則寫在 ConcreteVisitor 那裡。例如 Visitor 類別。&lt;/p&gt;
&lt;h4&gt;ConcreteVisitor 參與者&lt;/h4&gt;
&lt;p&gt;ConcreteVisitor 是實作 Visitor 的介面。它實作 visit(XXXX) 格式的方法，然後敘述各個 ConcreteAcceptor 的處理。 在前面的程式範例中，扮演這個角色的是 ListVisitor 類別。就像 ListVisitor 的 currentdir 欄位之值會發生變化一樣，在處理 visit(XXXX) 的過程中，ConcreteVisitor 的內部狀態也會有變化。&lt;/p&gt;
&lt;h4&gt;Acceptor 參與者&lt;/h4&gt;
&lt;p&gt;Acceptor 是表示 Visitor 訪問對象的參與者。宣告接受訪客的 accept 方法。Visitor 則被傳遞給 accept 方法的引數。例如 Acceptor 介面。&lt;/p&gt;
&lt;h4&gt;ConcreteAcceptor 參與者&lt;/h4&gt;
&lt;p&gt;ConcreteAcceptor 實作 Acceptor 的介面，例如 File 以及 Directory 類別。&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;把處理從資料結構分出來&lt;/strong&gt;。通常 ConcreteVisitor 可以單獨開發，不必跟 File 類別或 Directory 類別雜在一起;換句話說，Visitor Pattern 能提高 File 類別和 Directory 類別的&lt;strong&gt;零件獨立性&lt;/strong&gt;。假設現在想要把一個處理動作設計成 File 類別和 Directory 類別的方法，每次想新增&lt;strong&gt;處理&lt;/strong&gt;功能時就得去修改 File 類別和 Directory 類別，反而會變得麻煩。&lt;/p&gt;
&lt;h4&gt;新增 ConcreteVisitor 很容易&lt;/h4&gt;
&lt;p&gt;因為具體的處理可以直接丟給 ConcreteVisitor 去做，不需要為了這個處理就去修改 ConcreteAcceptor。&lt;/p&gt;
&lt;h3&gt;雙重調度&lt;/h3&gt;
&lt;p&gt;Visitor Pattern 的方法呼叫可整理如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;accept 方法的呼叫為: acceptor.accept(visitor)&lt;/li&gt;
&lt;li&gt;visit 方法的呼叫為: visitor.visit(acceptor)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;兩者剛好站在相反的立場。Visitor Pattern 由 ConcreteAcceptor 和 ConcreteVisitor 來決定實際的處理。一般成為雙重調度(double dispatch)。&lt;/p&gt;
&lt;h3&gt;The Open-Closed Principle&lt;/h3&gt;
&lt;p&gt;這個原則是主張類別應該:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;擴充(extension)時要開放(open)&lt;/li&gt;
&lt;li&gt;修改(modification)時要封閉(closed)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除非有特殊理由，否則程式設計師在設計類別時都應該容許以後繼續擴充該程式。若無正當理由，就不應該禁止後人擴充程式。這就是擴充時要開放。&lt;/p&gt;
&lt;p&gt;但是，如果每次擴充程式時還要去修改現有類別的話，那就太麻煩。所以，在擴充程式時沒有修改現有類別的需要正是&lt;strong&gt;修改時要關閉&lt;/strong&gt;的真正意義。&lt;/p&gt;
&lt;p&gt;總之，就是&lt;strong&gt;在不修改現有類別的原則下就可以擴充&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;新增ConcreteAcceptor 較為困難&lt;/h3&gt;
&lt;p&gt;假設要新增一個 Entry 類別的子類別，叫作 Device 類別。此時，必須先在 Visitor 類別建立一個 visit(Device) 方法。然後還要在 Visitor 的所有子類別都要實作這個 visit(Device) 方法。&lt;/p&gt;
&lt;h3&gt;Visitor 要怎樣做才能進行處理&lt;/h3&gt;
&lt;p&gt;Acceptor 必須公開足夠的資訊給 Visitor。例如，visit(Directory)裡面對每個目錄進入點都有執行 accept。如果想要做這樣的處理動作，Directory 必須提供&lt;strong&gt;能取得所有目錄進入點&lt;/strong&gt;的 iterator 方法。&lt;/p&gt;
&lt;p&gt;訪客很努力從資料結構取得必要的資訊。如果不能取得必要的資訊情報，訪客就不能發揮百分之百的功能。但是萬一把另外不應該公開的資訊公開出來，反而也會增加以後的維護困難。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;1.請新增一個類別，叫作 FileFindVistor 類別。這個類別是找出符合指定副檔名的檔案。&lt;/h4&gt;
&lt;p&gt;不需要修改 File 類別 或 Directory 類別。以抓出所有 html 為例。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/ae21ccbca4d0d47b98f1.js"&gt;&lt;/script&gt;

&lt;h4&gt;2.Directory 類別的 getSize 方法是進行&lt;strong&gt;取得目錄容量的處理&lt;/strong&gt;。請把這個方法改寫成&lt;strong&gt;取得容量大小&lt;/strong&gt;的 SizeVisitor 類別。&lt;/h4&gt;
&lt;p&gt;就是把該&lt;strong&gt;處理&lt;/strong&gt;獨立開來。&lt;/p&gt;
&lt;p&gt;修改 Directory 類別。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Iterator&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Vector&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Directory&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;                    &lt;span class="c1"&gt;// 目錄名稱&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;      &lt;span class="c1"&gt;// 目錄進入點的集合&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Directory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;         &lt;span class="c1"&gt;// 建構子&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;               &lt;span class="c1"&gt;// 取得名稱&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getSize&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                  &lt;span class="c1"&gt;// 取得目錄容量&lt;/span&gt;
        &lt;span class="n"&gt;SizeVisitor&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SizeVisitor&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
        &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;                          
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSize&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;                 
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;         &lt;span class="c1"&gt;// 新增進入點&lt;/span&gt;
        &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="nf"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Visitor&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;visit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;新增 SizeVisitor 類別。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Iterator&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SizeVisitor&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Visitor&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getSize&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;visit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSize&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;visit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Directory&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasNext&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Entry&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;3.請在 java.util.Vector 建立一個具有 Acceptor 介面功能的 AcceptorVector 類別。讓它能對 AcceptorVector 的物件個體 add Directory 和 File 的物件個體，而且也能 accept ListVisitor 的物件個體。&lt;/h4&gt;
&lt;p&gt;AcceptorVector 類別是 java.util.Vector 的子類別，被定義要實作 Acceptor。add 方法是繼承自 Vector，不需要另外定義。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Vector&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Iterator&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AcceptorVector&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Acceptor&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Visitor&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasNext&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Acceptor&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Acceptor&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Main 如下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Iterator&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Directory&lt;/span&gt; &lt;span class="n"&gt;root1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Directory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;root1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;diary.html&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

            &lt;span class="n"&gt;Directory&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Directory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;root2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;diary.html&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

            &lt;span class="n"&gt;AcceptorVector&lt;/span&gt; &lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AcceptorVector&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;etc.html&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

            &lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ListVisitor&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FileTreatmentException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Factory Method Pattern -- 建立物件個體可交給子類別</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/FactoryMethod.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/FactoryMethod.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;把 Template Method Pattern 應用在建立物件個體上面。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;在父類別規定物件個體的建立方法，但並沒有深入到較具體的類別。所有具體的完整內容都放在子類別。根據這個原則，我們可以大致分成產生物件個體的大綱和實際產生物件個體的類別兩方面。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;建立一個生產身份證的 factory。Product 類別和 Factory 類別屬於 framework 這個 package。負責建立產生物件個體大綱。&lt;/p&gt;
&lt;p&gt;IDCard 類別和 IDCardFactory 類別則處理實際的內容，屬於 idcard 這個 package。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/bb3f738c08ff7891be19.js"&gt;&lt;/script&gt;

&lt;h4&gt;Product (產品) 參與者&lt;/h4&gt;
&lt;p&gt;框架的部份。這個抽象類別是規定此 Pattern 所產生的物件個體應有的介面，具體內容則由子類別的 ConcreteProduct 規定。例如 Product 類別。&lt;/p&gt;
&lt;h4&gt;Creater (生產者) 參與者&lt;/h4&gt;
&lt;p&gt;框架的部份。這是產生 Product 的抽象類別。具體內容則有子類別的 ConcreteCreater 決定。例如 Factory 類別。Creator 對於實際產生的 ConcreteProduct 完全一無所知。Creator 唯一知道的是只要呼叫出 Product 和產生物件個體的方法，就能產生 Product。例如 createProduct 方法是產生物件個體的方法。&lt;strong&gt;如果用 new 的實際產生物件個體來取代產生物件個體的方法呼叫，則可解除實際類別名稱對父類別的約束。&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;ConcreteProduct (實際產品) 參與者&lt;/h4&gt;
&lt;p&gt;實際處理內容的部份。規定具體的產品樣式。例如 IDCard 類別。&lt;/p&gt;
&lt;h4&gt;ConcreteCreater (實際生產者) 參與者&lt;/h4&gt;
&lt;p&gt;實際處理內容的部份。規定製造實際製品的類別。例如 IDCardFactory 類別。&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;h4&gt;框架與內容&lt;/h4&gt;
&lt;p&gt;再範例程式中，framework 屬於框架，而 idcard 屬於內容。假設現在想要利用同一個框架建立不同的&lt;strong&gt;產品&lt;/strong&gt;和&lt;strong&gt;工廠&lt;/strong&gt;，例如產品 Television 類別以及電視機工廠　TelevisionFactory 類別。這時候當然要建立另外一個有 import framework　的　package television。&lt;/p&gt;
&lt;p&gt;我們可以不必修改 package framework 就能建立完全不同的&lt;em&gt;產品&lt;/em&gt;和&lt;em&gt;工廠&lt;/em&gt;的地方。&lt;/p&gt;
&lt;p&gt;package framework 並沒有 import package idcard。Product 類別和 Factory 類別也沒有任何具體的類別名稱（如 IDCard 及 IDCardFactory)。因此，如果要用同一個框架產生新類別時，完全不需要做任何修改。&lt;/p&gt;
&lt;h3&gt;產生物件個體的方法的實作方式&lt;/h3&gt;
&lt;p&gt;在程式範例中，Factory 類別的 createProduct 方法是抽象方法。也就是說，這個方法需要在子類別進行實作。createProduct 方法的敘述方式有下列三種：&lt;/p&gt;
&lt;h4&gt;寫成抽象方法&lt;/h4&gt;
&lt;p&gt;如果當作抽象方法，子類別就一定要實作這個方法。要是沒有實作的話，編譯的時候一定會檢查出來。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Factory&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt; &lt;span class="nf"&gt;createProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;另外準備預設的實作&lt;/h4&gt;
&lt;p&gt;萬一遇到子類別沒有進行實作的時候，就會使用這個實作。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Factory&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt; &lt;span class="nf"&gt;createProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不過這時候它是直接對 Product 類別做 new 的動作，所以不能把　Product 類別設為抽象類別。&lt;/p&gt;
&lt;h4&gt;設為錯誤&lt;/h4&gt;
&lt;p&gt;當子類別沒有進行實作時，程式一執行就會發生錯誤（如果有程式錯誤時，就表示沒有進行實作）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Factory&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt; &lt;span class="nf"&gt;createProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;FactoryMethodRuntimeException&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是這種方式只限於另外還有一個 FactoryMethodRuntimeException　的情形。&lt;/p&gt;
&lt;h3&gt;Pattern 利用與程式開發工程師之間的溝通&lt;/h3&gt;
&lt;p&gt;如果只看一個類別的話，根本無法確實掌握動作的方向。除了深入理解父類別的動作骨架並且找出其中的抽象方法之外，還要去看實際實作該抽象方法的類別的原始碼。&lt;/p&gt;
&lt;p&gt;一般來說，利用設計 Pattern 設計類別群組時，一定要完整地把設計理念傳達給後續負責維護的人。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;p&gt;把 IDCard 類別加上卡片的流水號碼，讓 IDCardFactory 類別有一個持有人和流水編號的對照表。&lt;/p&gt;
&lt;p&gt;不需要修改 framework.Product 類別、framework.Factory 類別或 Main 類別。即使要修改 IDCard 類別和 IDCardFactory 類別，也不用動到框架端的原始程式碼。&lt;/p&gt;
&lt;p&gt;修改 IDCard 類別。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="n"&gt;idcard&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;framework.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IDCard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;serial&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;IDCard&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;serial&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;建立&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;serial&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;的卡。&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;serial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serial&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;use&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;使用&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;serial&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;的卡。&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getOwner&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getSerial&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;serial&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改 IDCardFactory 類別。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="n"&gt;idcard&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;framework.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IDCardFactory&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Factory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Hashtable&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Hashtable&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;serial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt; &lt;span class="nf"&gt;createProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;IDCard&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serial&lt;/span&gt;&lt;span class="o"&gt;++);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;registerProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Product&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;IDCard&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDCard&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getOwner&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerial&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Hashtable&lt;/span&gt; &lt;span class="nf"&gt;getDatabase&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Abstract Factory Pattern -- 把相關零件組合成產品</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/abstractFactory.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/abstractFactory.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;所謂的&lt;strong&gt;抽象&lt;/strong&gt;，意思是指&lt;strong&gt;不考慮要如何具體進行實作&lt;/strong&gt;，只注意介面的部份。抽象工廠把各種抽象零件組合成產品。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;處理的重點是在&lt;strong&gt;介面&lt;/strong&gt;而不是零件的具體實作。只利用介面就能把零件組合成產品。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;將一個階層結構的相關網站鏈結做成HTML檔。&lt;/p&gt;
&lt;p&gt;包含下列三個 package 的類別群組:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;factory --- 含抽象工廠、零件和產品&lt;/li&gt;
&lt;li&gt;含 Main 的預設package&lt;/li&gt;
&lt;li&gt;listfactory --- 含具體工廠、零件和產品&lt;/li&gt;
&lt;/ul&gt;
&lt;script src="https://gist.github.com/twmht/c98ac2b197d3c3ed7a48.js"&gt;&lt;/script&gt;

&lt;h4&gt;AbstractProduct 參與者&lt;/h4&gt;
&lt;p&gt;AbstractProduct 規定由 AbstractFactory 所產生的抽象零件及產品的介面。例如 Link、Tray 和 Page 類別。&lt;/p&gt;
&lt;h4&gt;AbstractFactory 參與者&lt;/h4&gt;
&lt;p&gt;AbstractFactory 規定用來產生 AbstractProduct 的物件個體的介面。例如 Factory 類別。&lt;/p&gt;
&lt;h4&gt;Client 參與者&lt;/h4&gt;
&lt;p&gt;Client 是一個只使用 AbstractFactory 和 AbstractProduct 的介面來完成工作的參與者。Client 並不知道具體零件、產品和工廠。例如 Main 類別。&lt;/p&gt;
&lt;h4&gt;ConcreteProduct 參與者&lt;/h4&gt;
&lt;p&gt;ConcreteProduct 是實作 AbstractProduct 的參與者:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;listfactory package --- ListLink、ListTray 以及 ListPage 等類別。&lt;/li&gt;
&lt;li&gt;tablefactory package --- TableLink、TableTray 以及 TablePage 等類別。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ConcreteFactory 參與者&lt;/h4&gt;
&lt;p&gt;ConcreteFactory 實作 AbstractFactory 的介面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;listfactory package --- ListFactory 類別&lt;/li&gt;
&lt;li&gt;tablefactory package --- TableFactory 類別&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;h4&gt;新增具體工廠很容易&lt;/h4&gt;
&lt;p&gt;因為要建立哪些類別以及該實作哪些方法一清二楚，當然就簡單許多。&lt;/p&gt;
&lt;p&gt;假設現在想新增其他的具體工廠。固定動作不外乎就是建立 Factory, Link, Tray, Page 的子類別，實作各個抽象方法。換句話說，就是要讓含有 factory package 的類別的抽象部份全部具體化。&lt;/p&gt;
&lt;p&gt;此時，無論新增幾個具體工廠(或修改具體工廠的 bug)，都不需要再去修改抽象工廠或 Main 的部份。&lt;/p&gt;
&lt;h3&gt;新增零件就很有難度&lt;/h3&gt;
&lt;p&gt;假設現在想要在 factory package 新增一個顯示影像的 Picture 零件。此時，所有已經存在的具體工廠都要修改成有支援 Picture。以 listfactory package 為例，要修改的動作包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 ListFactory 類別新增 createPicture 方法&lt;/li&gt;
&lt;li&gt;新增一個 ListPicture 類別&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;已經完工的具體工廠愈多，修改動作就愈多。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;1. 在 Tray 類別中，tray 欄位被定義為 protected。如果改成 private，優缺點為何?&lt;/h4&gt;
&lt;p&gt;優點是其子類別(實作 Tray 的類別)跟 tray 不會有依存關係。缺點則是不能直接參照，必須另外寫一個取得 tray 欄位的方法。&lt;/p&gt;
&lt;h4&gt;2. 假設現在想在 Factory 類別中定義一個 &lt;strong&gt;可產生只有 Yahoo 鏈結的網頁的具體方法&lt;/strong&gt;，也就是 &lt;strong&gt;public page createYahooPage()&lt;/strong&gt;， 網頁作者和標題都是 Yahoo，此時具體工廠和具體零件要如何修改?&lt;/h4&gt;
&lt;p&gt;只有 Factory 類別和 Main 類別需要修改。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/93b775cdf35af47cf826.js"&gt;&lt;/script&gt;

&lt;h4&gt;3. Page 類別的作用和 Tray 類別很像，為什麼不乾脆把 Page 類別寫成是 Tray 類別的子類別呢?&lt;/h4&gt;
&lt;p&gt;因為 Page 不能 add 到 Tray (HTML 語法不合)。如果把 Page 類別設為 Tray 類別的子類別，則 Page 也是 Item 的子類別，故也可以 add。&lt;/p&gt;
&lt;p&gt;但是必須在 Page 類別宣告 makeHTML。若如下建立一個含有 makeHTML 方法的 java 的介面的 HTMLLable，修改由 Item 類別和 Page 類別 implements HTMLLable，則可讓整個程式更加嚴謹。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;HTMLLable&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;makeHTML&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Adapter Pattern -- 換個包裝再度利用</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/adapter.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/adapter.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;例如將直流電換成交流電，轉換器的功能是介入既有內容和需要結果之間，作為溝通的橋樑。&lt;/p&gt;
&lt;p&gt;如果既有內容無法直接利用時，通常需要先轉換成必要的型態後再使用。具有填平&lt;strong&gt;既有內容&lt;/strong&gt;和&lt;strong&gt;需要結果&lt;/strong&gt;兩者間的&lt;strong&gt;落差&lt;/strong&gt;就是 &lt;strong&gt;Adapter Pattern&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;設計wrapper，將既有內容包裝之後，重新再利用。&lt;/p&gt;
&lt;h3&gt;程式範例(繼承)&lt;/h3&gt;
&lt;p&gt;改變輸出字串的外框，採用繼承。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/3576c41a962cb0ef2671.js"&gt;&lt;/script&gt;

&lt;h3&gt;程式範例(委讓)&lt;/h3&gt;
&lt;p&gt;改變輸出字串的外框，採用委讓。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/d89785e518eab0bf410e.js"&gt;&lt;/script&gt;

&lt;h4&gt;Target (對象) 參與者&lt;/h4&gt;
&lt;p&gt;決定現在需要什麼方法的參與者，例如筆記型電腦必須要有直流電才能動。例如 Print 介面。&lt;/p&gt;
&lt;h4&gt;Client 參與者&lt;/h4&gt;
&lt;p&gt;利用 Target 的方法來做事的參與者，例如有直流電 12V 才能用的比較型電腦。例如 Main 類別。&lt;/p&gt;
&lt;h4&gt;Adaptee (被動符合) 參與者&lt;/h4&gt;
&lt;p&gt;具有既有方法的參與者，也就是交流電 110V 的交流電電源。例如 Banner 類別。&lt;/p&gt;
&lt;p&gt;如果擔任 Adaptee 參與者的方法與 Target 參與者的方法有相符時(即電源不需要轉換)，那就不需要 Adapter 參與者了。&lt;/p&gt;
&lt;h4&gt;Adapter 參與者&lt;/h4&gt;
&lt;p&gt;利用 Adaptee 的方法努力滿足 Target 的要求。例如，把交流電 110V 轉換成直流電 12V 的轉換器。例如 PrintBanner 類別。&lt;/p&gt;
&lt;p&gt;如果是類別的 Adapter Pattern，Adapter 要透過&lt;strong&gt;繼承&lt;/strong&gt;的方式來利用 Adaptee。而換到物件個體時，就要改以&lt;strong&gt;委讓&lt;/strong&gt;來利用 Adaptee。&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;h4&gt;就算沒有原始碼也無妨&lt;/h4&gt;
&lt;p&gt;Adapter Pattern 可以把過去使用過的類別換個包裝重新建立出需要的類別。因為可以確定既有類別 (Adaptee 參與者) 沒有問題，所以只要重點式地檢查 Adapter 參與者的類別即可。&lt;/p&gt;
&lt;p&gt;Adapter Pattern 只要知道既有類別的規格，就能建立其它新的類別。&lt;/p&gt;
&lt;h4&gt;版本更新與相容性&lt;/h4&gt;
&lt;p&gt;凡是軟體都會需要做版本更新，當你在做軟體的版本更新時最常碰到的問題應該是&lt;strong&gt;與舊版本的相容性&lt;/strong&gt;。利用 Adapter Pattern 可讓新舊版本共存，維護更容易。&lt;/p&gt;
&lt;p&gt;假設現在完成版本更新後，就只著重在新版本而不想再維護舊版本的部份。此時，把新版本視為 Adaptee 參與者，舊版本則為 Target ，接下來只要建立一個擔任 Adapter 參與者的類別，讓它利用新版本的類別來實作舊版本即可。&lt;/p&gt;
&lt;p&gt;如果 Adaptee 與 Target 功能相差太多的話，當然就不能使用 Adapter Pattern 了。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;p&gt;java.util.Properties類別是用來管理 key 和相對應 value （即內容），如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;year=2000 &lt;/li&gt;
&lt;li&gt;month=11 &lt;/li&gt;
&lt;li&gt;day=20&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;java.util.Properties類別有下面幾個方法可從資料束（stream）讀取內容或反向寫入到 資料束。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;void load(InputStream in) throws IOException 從InputStream讀取內容的集合。&lt;/li&gt;
&lt;li&gt;void store(OutputStream out, String header) throws IOException 把內容的集合寫入到OutputStream。header是註解字串。 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;請利用Adapter Pattern建立一個把內容的集合儲存成檔案的FileProperties類別。&lt;/p&gt;
&lt;p&gt;假設在此是以FileIO介面（Target角色）宣告把內容的集合儲存成檔案的方
法，FileProperties類別則是實作這個FileIO介面。&lt;/p&gt;
&lt;p&gt;執行前和執行後的file.txt、newfile.txt（若該行字首是#，則為java.util.Properties類別自動產生的註解）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果有FileProperties類別，就算不知道java.util.Properties類別的方法，只要知道FileIO介面的方法就能處理內容。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以電源來比喻的話，java.util.Properties類別是既有的交流電110V、FileIO介面是現在需要的直流電12V，而FileProperties類別則為轉接器。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;實際上這個問題主要是要把本來的 java.util.Properties 包裝成 FileProperties 類別。&lt;/strong&gt;&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/dd1521c8d1fcf6e16d4f.js"&gt;&lt;/script&gt;</summary></entry><entry><title>Bridge Pattern -- 分成功能階層和實作階層</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/bridge.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/bridge.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;bridge 是 &lt;strong&gt;橋樑&lt;/strong&gt; 的意思。就像現實社會裡的橋樑擔負著連接河川兩岸的重責大任一樣，Bridge Pattern 也是負責連接兩個不同位置的參與者。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;Bridge Pattern 居間溝通的兩個位置是指 &lt;strong&gt;功能的類別階層&lt;/strong&gt; 和 &lt;strong&gt;實作的類別階層&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;想要新增功能時&lt;/h4&gt;
&lt;p&gt;假設現在有一個類別 Something，如果想對 Something 新增其它功能時(例如，想多加一個新方法)，首先要建立 SomethingGood 類別作為 Something 的子類別 (子類別、衍生類別或擴充類別)。這就是一個小型的類別階層。
這個階層是為了新增功能而建立:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本功能放在父類別&lt;/li&gt;
&lt;li&gt;新功能則新增到子類別&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;又稱為 &lt;strong&gt;功能的類別階層&lt;/strong&gt;。
假設現在又想對 SomethingGood 類別新增另一個功能時。此時，要建立 SomethingBetter 類別作為 SomethingGood 類別的子類別。如此一來，功能的類別階層又往下延伸一層。&lt;/p&gt;
&lt;p&gt;如欲追加新功能時，找出類別階層中最接近目的的類別，然後建立一個子類別、建立一個有該功能的新類別...。這就是一個功能的類別階層。基本上，類別階層也最好不要建立太多層。&lt;/p&gt;
&lt;h4&gt;想要新增實作時&lt;/h4&gt;
&lt;p&gt;在 Template Method Pattern 中，抽象類別把一連串的方法群組宣告成抽象方法，再規定介面。然後由子類別實際實作這個抽象方法。父類別的作用是利用抽象方法來規定介面，子類別的作用則是進行實作。這樣把讓父類別扮演好參與者分工，可以建立出高零組件價值(可更換性)的類別。&lt;/p&gt;
&lt;p&gt;這裡也有類別階層的影子，假設實作父類別 AbstractClass 的抽樣方法的子類別是 ConcreteClass，則可建立起一個小型類別階層。不過這裡的類別階層並不是為了新增功能，因為類別階層沒有追加新功能的目的。這個類別階層有下列的參與者分工:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;父類別使用抽象方法來規定介面&lt;/li&gt;
&lt;li&gt;子類別使用具體方法來實作此介面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這樣的類別階層就稱為 &lt;strong&gt;實作的類別階層&lt;/strong&gt;。
假設現在要建立另一個 AbstractClass 的實作，若其子類別為 AnotherConcreteClass，則實作的階層會有一點變化。總之，如果要建立一個新的實作，必須建立 AbstractClass 的子類別，然後實作抽象方法，這就是實作的類別階層。&lt;/p&gt;
&lt;h4&gt;類別階層的同處一室和獨立分離&lt;/h4&gt;
&lt;p&gt;當我們有一個念頭 &lt;strong&gt;好，現在要做一個子類別&lt;/strong&gt;的時候，請先確認清楚自己想要完成的內容 &lt;strong&gt;這個動作是要新增功能?還是要進行實作?&lt;/strong&gt;。如果類別階層只有一個的話，功能的類別階層和實作的的類別階層就會放在同一個階層構造裡。這樣可能會讓類別階層變得太複雜，而且不容易預測後面的發展。因為自己在建立子類別時，常常會搞不清楚應該放在類別階層的哪個位置。&lt;/p&gt;
&lt;p&gt;既然如此，那就把 &lt;strong&gt;功能的類別階層&lt;/strong&gt; 和 &lt;strong&gt;實作的類別階層&lt;/strong&gt; 分成兩個獨立的類別階層吧。如果一分為二可能會弄的支離破碎，所以必須在兩個類別階層之間建立一座溝通的橋樑 (bridge)。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;用來 &lt;strong&gt;列印內容&lt;/strong&gt; 的程式。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/bdf3a8e71e7f4d11192e.js"&gt;&lt;/script&gt;

&lt;h4&gt;Abstraction (抽象化) 參與者&lt;/h4&gt;
&lt;p&gt;位於 &lt;strong&gt;功能的類別階層&lt;/strong&gt; 最上層的類別，利用 Implementor 的方法只記載基本功能的類別。這個物件個體是保持住 Implementor。例如 Display 類別。&lt;/p&gt;
&lt;h4&gt;RefinedAbstraction (改良後的抽象化) 參與者&lt;/h4&gt;
&lt;p&gt;對 Abstraction 參與者新增功能的參與者。例如 CountDisplay 類別。&lt;/p&gt;
&lt;h4&gt;Implementor (實作者) 參與者&lt;/h4&gt;
&lt;p&gt;位於 &lt;strong&gt;實作的類別階層&lt;/strong&gt; 最上層的類別，規定要實作 Abstraction 參與者之介面的方法。例如 DisplayImpl 類別。&lt;/p&gt;
&lt;h4&gt;ConcreteImplementor (具體的實作者) 參與者&lt;/h4&gt;
&lt;p&gt;具體實作 Implementor 參與者的介面。例如 StringDisplayImpl 類別。&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;p&gt;如果想新增功能的話，就在功能的類別階層追加類別。這時候根本不需要修改實作的類別階層，而且所有新增加的功能都可以利用&lt;strong&gt;所有實作&lt;/strong&gt;來使用。
在 Display 類別中使用了委讓。實作的物件個體被保留在 Display 的 impl 欄位中，所以會&lt;strong&gt;輪流&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若執行 open 時，則呼叫 impl.rawOpen()&lt;/li&gt;
&lt;li&gt;若執行 print 時，則呼叫 impl.rawPrint()&lt;/li&gt;
&lt;li&gt;若執行 close 時，則呼叫 impl.rawClose()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要一聲該做事了，就會&lt;strong&gt;交給 impl 辦&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;繼承是一種牢不可分的關係，若要修改類別關係，則要修改原始碼。但委讓是說分手就分手。因為它的對象是跟在產生 Display 類別的物件個體的階段時傳遞給引數的內容。例如 Main 類別產生 Display 和 CountDisplay 的物件個體時，就把 StringDisplayImpl 的物件個體傳遞給引數。&lt;/p&gt;
&lt;p&gt;如果還有一個非 StringDisplayImpl 類別的 ConcreteImplementor 參與者傳遞給 Display 或者是 CountDisplay，則實作會很乾脆的切換過去。只要修改 Main 類別，不需要動到 Display 或 DisplayImpl 等程式碼。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;1.假設要新增一個類別，讓它有&lt;strong&gt;列印隨機次數&lt;/strong&gt;的處理能力。此時應該要擴充哪個類別？(假設列印的方法是 void randomDisplay(int times)，只有遇到大於0但小於 times 的時候才列印隨機次數)&lt;/h4&gt;
&lt;p&gt;這是屬於&lt;strong&gt;功能&lt;/strong&gt;，則新增在&lt;strong&gt;功能的類別階層&lt;/strong&gt;中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Random&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RandomCountDisplay&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;CountDisplay&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RandomCountDisplay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DisplayImpl&lt;/span&gt; &lt;span class="n"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;randomDisplay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;multiDisplay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.假設要新增一個類別，讓它有&lt;strong&gt;輸出文字檔內容&lt;/strong&gt;的處理能力。此時應該要擴充哪個類別？&lt;/h4&gt;
&lt;p&gt;擴充的是 &lt;strong&gt;實作階層類別&lt;/strong&gt;，原先是利用 standard output，現在則新增一個實作類別輸出到檔案。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileDisplayImpl&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;DisplayImpl&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;BufferedReader&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;MAX_READAHEAD_LIMIT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// 可反覆列印的上限（緩衝器容量）&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;FileDisplayImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;rawOpen&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BufferedReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MAX_READAHEAD_LIMIT&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;=-=-=-=-=-= &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; =-=-=-=-=-=&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 花邊&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;rawPrint&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reset&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 捲回到mark的位置&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readLine&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;rawClose&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;=-=-=-=-=-= &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 花邊&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改 Main 類別。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;CountDisplay&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CountDisplay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileDisplayImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;star.txt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiDisplay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;3.假設要新增一個列印結果: 列印第一個字元-&amp;gt;列印多個裝飾字元-&amp;gt;列印結束字元並且換行。反覆執行多行，裝飾字元數量會隨著反覆次數而增加。&lt;/h4&gt;
&lt;p&gt;在&lt;strong&gt;功能類別階層&lt;/strong&gt;中，新增一個表示輸出內容逐漸增加次數的類別。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IncreaseDisplay&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;CountDisplay&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 增加次數&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;IncreaseDisplay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DisplayImpl&lt;/span&gt; &lt;span class="n"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;increaseDisplay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;multiDisplay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在&lt;strong&gt;實作類別階層&lt;/strong&gt;中，新增一個表示輸出成字元的類別。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CharDisplayImpl&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;DisplayImpl&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;foot&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;CharDisplayImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;foot&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;foot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foot&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;rawOpen&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;rawPrint&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;rawClose&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foot&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要修改 Main 類別即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;IncreaseDisplay&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IncreaseDisplay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CharDisplayImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;IncreaseDisplay&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IncreaseDisplay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CharDisplayImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;increaseDisplay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;increaseDisplay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Builder Pattern -- 組合複雜的物件個體</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/builder.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/builder.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;所謂萬丈高樓平地起，大樓首先得打穩地基並搭建骨架，再由上而下一層層蓋上去。一般來說，如果搭建的結構愈複雜就愈難一氣呵成。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;你得先把整個架構分成幾個部份，等到個別部份都完成了之後再依序組合起來才行。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;設計一個建立&lt;strong&gt;文件&lt;/strong&gt;的程式吧!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;含有一個標題&lt;/li&gt;
&lt;li&gt;含有一些字串&lt;/li&gt;
&lt;li&gt;含有一些有項目符號的項目&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Builder 類別規定組成文件的方法，而 Director 類別利用這個方法才能產生一份文件具體的文件。&lt;/p&gt;
&lt;p&gt;Builder 類別是抽象類別，不含實際的處理內容，僅宣告抽象方法而已。決定產生文件的具體處理內容則是 Builder 類別的子類別。&lt;/p&gt;
&lt;p&gt;以下幾個類別為 Builder 類別的子類別。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TextBuilder 類別&lt;/li&gt;
&lt;li&gt;HTMLBuilder 類別&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Director 若使用 TextBuilder 則可產生一般格式的文件，如果使用 HTMLBuilder 則可產生 HTML 格式的文件。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/763c4db0a1d41388d333.js"&gt;&lt;/script&gt;

&lt;h4&gt;Builder 參與者&lt;/h4&gt;
&lt;p&gt;Builder 規定產生物件個體的介面。包括有產生物件個體各個部份的方法和取得最後結果的方法。例如 Builder 類別。&lt;/p&gt;
&lt;h4&gt;ConcreteBuilder 參與者&lt;/h4&gt;
&lt;p&gt;ConcreteBuilder 是實作 Builder 介面的類別。在實際產生物件個體時所呼叫的方法就是在這裡定義。例如 TextBuilder 以及 HTMLBuilder。&lt;/p&gt;
&lt;h4&gt;Director 參與者&lt;/h4&gt;
&lt;p&gt;Director 利用 Builder 的介面產生物件個體。設計程式必須注意不要被 ConcreteBuilder 牽著鼻子走。為了讓 ConcreteBuilder 無論在什麼情形之下都能正常發揮功能，所以只使用 Builder 的方法。例如 Director 類別。&lt;/p&gt;
&lt;h4&gt;Client 參與者&lt;/h4&gt;
&lt;p&gt;利用 Builder Pattern 的參與者，例如 Main 類別。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;1. 將 Builder 類別修改成介面，同時配合修改其它類別。&lt;/h4&gt;
&lt;p&gt;Builder 類別由抽象類別直接修改成介面即可。其子類別則是改成實作該介面。其餘可不用改。&lt;/p&gt;
&lt;h4&gt;2. 再建立一個 ConcreteBuilder 吧！&lt;/h4&gt;
&lt;p&gt;可以用 GUI 建立。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/e78cfebd191dbc878f3c.js"&gt;&lt;/script&gt;</summary></entry><entry><title>Chain of Responsibility Pattern -- 責任轉送</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/chainOfResponsibility.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/chainOfResponsibility.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;什麼是 "轉送" 呢? 假設現在要到某家公司去取文件，跟櫃台小姐說明來意後，他會告訴你應該到 "業務窗口" 去處理。當你走到業務窗口後，那邊又告訴你這份文件目前由 "客戶服務部" 負責;因此你得再到客戶服務部去一趟，找到客戶服務部後，小姐還是很客氣的說文件應該要到 "文管中心" 去拿。像這樣子把自己的要求傳送下去，一直找到適當的人選或地點就是 "轉送"。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;例如，現在產生一個要求，但無法直接決定處理該要求的物件。這時候，可以把一個以上的物件串聯成鎖鏈狀，依序走過這個連鎖物件再決定最後目的地的物件。
如果使用這個 Pattern，可以降低 "要求端" 和 "處理端" 之間的結合性，讓它們個別成為獨立的零件。另外，還可支援有需依發生狀況改變處理要求的物件的程式。
先對人產生一個要求，如果這個人有處理的能力就處理掉;如果不能處理的話，就把要求轉送給 "第二個人"。同樣的，如果第二個人有處理能力的話就處理掉，不能處理的話，就繼續轉送給第三個人，以此類推。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;這個程式會產生問題以及決定解決問題的人。例如一開始先是 Bob 在努力解決問題，但無法解決的時候就換成 Diana 接手。在這個過程中，都沒有發現 Alice 的蹤影，因為 Alice 只負責轉送所有問題。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/7eeb3b146fbdc6fd0ef9.js"&gt;&lt;/script&gt;

&lt;h4&gt;Handler (處理者) 參與者&lt;/h4&gt;
&lt;p&gt;Handler 是規定處理要求的介面的參與者。它會維持住 "下一個人"，萬一出現自己無法處理的要求時，再轉送過去。當然， "下一個人" 也是 Handler。例如 Support 類別。處理要求的方法則是 support 方法。&lt;/p&gt;
&lt;h4&gt;ConcreteHandler 參與者&lt;/h4&gt;
&lt;p&gt;ConcreteHandler 是具體處理要求的參與者。例如NoSupport、LimitSupport、OddSupport 以及 SpecialSupport 這幾個類別。&lt;/p&gt;
&lt;h4&gt;Client (要求者) 參與者&lt;/h4&gt;
&lt;p&gt;Client 是對第一個 ConcreteHandler 發出要求的參與者，例如 Main 類別。&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;h4&gt;讓要求跟處理要求兩者間的結合關係不會太緊密&lt;/h4&gt;
&lt;p&gt;Client 直接把要求丟給第一個人，接下來這個要求就會被送往進行連鎖處理，由適合的處理者來處理要求。&lt;/p&gt;
&lt;p&gt;如果不想使用這個 Pattern 的話，就必須採取中央集權式的管理，也就是要由其中一個人掌握&lt;strong&gt;這個要求該由哪個人處理&lt;/strong&gt;的訊息。這個訊息最好不要交給&lt;strong&gt;發出要求的人&lt;/strong&gt;，因為如果發出要求的人還要了解處理者個別作用能力的話，反而會降低零件的獨立性。&lt;/p&gt;
&lt;h4&gt;機動性改變連鎖狀態&lt;/h4&gt;
&lt;p&gt;支援小組從 Alice 到 Fred 的排列順序都沒有改變。但是，程式也有可能需要機動性改變物件(處理要求的 ConcreteHandler)之間的關係。此時，只要像 Chain of Responsibility Pattern 這樣利用委讓來轉送，就能根據狀況變化重組 ConcreteHandler。&lt;/p&gt;
&lt;p&gt;萬一程式沒有利用 Chain of Responsibility Pattern，把&lt;strong&gt;如果是A要求，則由甲處理者處理&lt;/strong&gt;的對應關係寫死的話，要想在跑程式的時候改成其他的處理者就很麻煩。&lt;/p&gt;
&lt;h4&gt;能專心工作在自己的崗位上&lt;/h4&gt;
&lt;p&gt;所有 ConcreteHandler 都只看著自己有能力處理的工作，如果自己處理不了，就當機立斷送出去。如此一來，應該寫在各個 ConcreteHandler 的處理就會鎖定是在該 ConcreteHandler 的固定內容。&lt;/p&gt;
&lt;p&gt;假設現在不用這個 Pattern，那就要採取找&lt;strong&gt;一個出來帶頭，讓它決定要由誰來處理不同的要求的方法&lt;/strong&gt;;或者是讓所有 ConcreteHandler 都要負責&lt;strong&gt;工作分配&lt;/strong&gt;，也就是&lt;strong&gt;如果自己無法處理時，要交給某甲。如果某甲也不行，就交給某乙。如果系統出現 A 狀況，就交給某丙的方法。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;轉送會造成處理速度變慢？&lt;/h3&gt;
&lt;p&gt;如果有預先確定由誰處理哪個要求，可以讓處理者立即動手處理，相較之下，Chain of Responsibility Pattern 的處理速度本來就會稍慢。&lt;/p&gt;
&lt;p&gt;如果說要求跟處理者的關係很固定，而且又講究速度時，可能不使用這個 Pattern 會較有利。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;1. 視窗系統使用 Chain of Responsibility Pattern 的頻率很高。 視窗上有很多種元件，當按下滑鼠左鍵時所產生的事件是如何轉送出去?轉送位置(next)又出現在哪裡?&lt;/h4&gt;
&lt;p&gt;通常是在元件所在的父視窗為 next 的情況下，傳遞給元件的要求如果不是由該元件處理，則會傳過去給父視窗。&lt;/p&gt;
&lt;h3&gt;2. Support 類別中，support 方法設為 public，但 resolve 方法卻是 protected。為什麼？&lt;/h3&gt;
&lt;p&gt;因為當其他類別要求 Support 類別的物件個體幫忙解決問題時，必須要使用 support 方法，而不是 resolve 方法。&lt;/p&gt;
&lt;h3&gt;3. 原本以遞迴呼叫的 suppot 方法，請改成迴圈吧！&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Support&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;                  &lt;span class="c1"&gt;// 問題解決者的名稱&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Support&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;                 &lt;span class="c1"&gt;// 轉送位置&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Support&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;         &lt;span class="c1"&gt;// 產生問題解決者&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Support&lt;/span&gt; &lt;span class="nf"&gt;setNext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Support&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// 設定轉送位置&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;support&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Trouble&lt;/span&gt; &lt;span class="n"&gt;trouble&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;          
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Support&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trouble&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trouble&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fail&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trouble&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;              &lt;span class="c1"&gt;// 列印字串&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Trouble&lt;/span&gt; &lt;span class="n"&gt;trouble&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 解決的方法&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;done&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Trouble&lt;/span&gt; &lt;span class="n"&gt;trouble&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// 已解決&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trouble&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; is resolved by &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;fail&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Trouble&lt;/span&gt; &lt;span class="n"&gt;trouble&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// 尚未解決&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trouble&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; cannot be resolved.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Command Pattern -- 將命令寫成類別</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/command.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/command.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;當類別在執行作業時，會呼叫自己類別或其他類別的方法，呼叫方法之後的結果會反應在物件狀態上，但卻不會留下任何作業紀錄。&lt;/p&gt;
&lt;p&gt;遇到這種情形的時候，要是有一個類別能表現"請執行這項作業"的"命令"時就方便多了。因為如此一來便可以用一個"表示命令的類別物件個體"來代表要執行的作業，而不需要採用"呼叫方法"之類的動態處理。如想管理相關紀錄時，只需要管理該物件個體的集合即可。而若預先將命令的集合儲存起來，還可以再執行同一個命令;或者是把多個命令結合成一個新命令供再利用。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;這樣的Pattern叫作Command Pattern，有時也稱為"Event"，跟"Event driven"中的Event是同一個意思。一旦發生事件(例如按下滑鼠左鍵，或按下右鍵)，則先將該事件變成物件個體，按照發生順序排入queue中。接著，再依序處理所有排列等候的事件。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;設計一個簡單的繪圖軟體，移動滑鼠的時候，便會自動產生一個個紅點，按下clear即可清除。
當使用者移動滑鼠的時候，就會產生"在這裡畫一個點"的command。把這個物件個體儲存起來，需要用的時候就可以繼續畫紅點。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/613b2636b333ca809e86.js"&gt;&lt;/script&gt;

&lt;h4&gt;Command 參與者&lt;/h4&gt;
&lt;p&gt;定義command的API。例如Command Interface。&lt;/p&gt;
&lt;h4&gt;ConcreteCommand 參與者&lt;/h4&gt;
&lt;p&gt;實際上實作Command參與者的API，例如MacroCommand以及DrawCommand等類別。&lt;/p&gt;
&lt;h4&gt;Receiver 參與者&lt;/h4&gt;
&lt;p&gt;Command 參與者執行命令時的動作對象，也可以稱為受命者。例如接受DrawCommand命令的是DrawCanvas類別。&lt;/p&gt;
&lt;h4&gt;Client 參與者&lt;/h4&gt;
&lt;p&gt;在產生ConcreteCommand參與者時，分配Receiver的參與者。例如Main類別，它是配合滑鼠移動而產生 DrawCommand 的物件個體，不過同時也傳遞 DrawCommand 的物件個體給建構子，作為Receiver 參與者。&lt;/p&gt;
&lt;h4&gt;Invoker 參與者&lt;/h4&gt;
&lt;p&gt;開始執行命令的參與者，呼叫Command所定義的API。例如Main和DrawCanvas等類別都是呼叫 Command Interface 的 execute 方法。&lt;/p&gt;
&lt;h4&gt;命令應該要有的資訊是什麼&lt;/h4&gt;
&lt;p&gt;命令應該要有哪些資訊會因為目的而有所不同。前面的 DrawCommand 類別只有畫點位置的資訊，而沒有點的大小或色彩等資訊。&lt;/p&gt;
&lt;p&gt;假設 DrawCommand 有一個該事件發生的時間點，如此一來，在畫的時候，可以重現出使用者滑鼠移動的快慢情形。&lt;/p&gt;
&lt;p&gt;DrawCommand 類別還有一個表示繪製對象的欄位 (drawable)。在程式中的 DrawCanvas 的物件個體只有一個，所有繪製當然都是針對它，所以這個 drawable 欄位反而沒有太大意義。
但是如果有多個繪製對象 (也就是 Receiver)，這個欄位就很有用。因為 ConcreteCommand 本身&lt;b&gt;知道&lt;/b&gt; Receiver，所以不管是誰在管理或是擁有 ConcreteCommand，都可以做 execute 的動作。&lt;/p&gt;
&lt;h4&gt;儲存紀錄&lt;/h4&gt;
&lt;p&gt;程式用 MacroCommand 的物件個體 (history) 來表示繪製的紀錄，因為這個物件個體擁有目前為止的所有繪製相關資訊。這意思是說，只要確實將這個物件個體儲存成檔案，就能儲存繪製記錄。&lt;/p&gt;
&lt;h4&gt;轉換器&lt;/h4&gt;
&lt;p&gt;Main 類別共實作3個介面，但實際使用到的介面的方法卻只是其中一小部份。舉例來說，MouseMotionListener 中，也只有用到 mouseDragged 方法。而 WindowListener 也只有用到 windowClosing 方法。&lt;/p&gt;
&lt;p&gt;為了簡化整個程式，在 java.awt.event 裡面有一個轉換器。例如，對應 MouseMotionListener 介面的是 MouseMotionAdapter 類別; 對應 WindowListener 介面的是 WindowAdapter 類別。&lt;/p&gt;
&lt;p&gt;以 MouseMotionAdapter 類別來講的話，這個類別會實作 MouseMotionListener 介面，所有該介面要求的方法都會實作到，不過，這個實作都是空的，所以只要產生 MouseMotionAdapter 類別的子類別並且實作必要的方法就能達到目的。&lt;/p&gt;
&lt;p&gt;可以利用 inner class 的結構來使用轉換器。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;1. 新增一個設定色彩的功能。另外建立一個 ColorCommand 類別，來表示設定色彩的命令。&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;在 drawer package 中新增一個表示設定色彩的命令的 ColorCommand 類別。&lt;/li&gt;
&lt;li&gt;在 Drawable 介面新增一個更改色彩的方法 setColor。&lt;/li&gt;
&lt;li&gt;新增後並實作 DrawCanvas 類別。&lt;/li&gt;
&lt;li&gt;在 Main 類別新增可更改色彩的變色按鍵。&lt;/li&gt;
&lt;/ol&gt;
&lt;script src="https://gist.github.com/twmht/eb33fe5e8beac2fdd351.js"&gt;&lt;/script&gt;

&lt;h4&gt;2. 新增一個刪除最後畫的點的復原功能。&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;新增復原鍵&lt;/li&gt;
&lt;li&gt;按下復原鍵時，則呼叫 history.undo 重畫。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;command package 及 drawer package 都不需要改。
&lt;script src="https://gist.github.com/twmht/685e4c86859b4fabb7c7.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h4&gt;3. 修改 Main 類別，利用 MouseMotionAdapter 以及 WindowAdapter 來取代 MouseMotionListener 介面和 WindowListener 介面。&lt;/h4&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/twmht/0b585df6c2e35c68e58d.js"&gt;&lt;/script&gt;&lt;/p&gt;</summary></entry><entry><title>Composite Pattern -- 對容器和內容一視同仁</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/composite.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/composite.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;舉例來說，目錄和檔案都可以放在目錄底下，因此可以一視同仁。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;可以把目錄想成是容器，檔案想成是內容，容器底下可能是內容，也可能是更小一號的容器。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;以模擬方式表示檔案和目錄的程式。表示檔案的類別是 File 類別、表示目錄的是 Directory 類別，兩者合併起來就是父類別 Entry 類別。Entry 類別是表示目錄進入點的類別，對 File 和 Directory 一視同仁的類別。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/3aa67b2bb2be40cd03ca.js"&gt;&lt;/script&gt;

&lt;h4&gt;Leaf 參與者&lt;/h4&gt;
&lt;p&gt;表示內容的參與者。不可以放入其他東西。例如 File 類別。&lt;/p&gt;
&lt;h4&gt;Composite 參與者&lt;/h4&gt;
&lt;p&gt;表示容器的參與者。可放入 Leaf 或 Composite。例如 Directory 類別。&lt;/p&gt;
&lt;h4&gt;Component 參與者&lt;/h4&gt;
&lt;p&gt;對 Leaf 和 Component 一視同仁的參與者。Component 是 Leaf 和 Composite 共用的父類別。例如 Entry 類別。&lt;/p&gt;
&lt;h4&gt;Client 參與者&lt;/h4&gt;
&lt;p&gt;利用 Composite Pattern 的人，例如 Main 類別。&lt;/p&gt;
&lt;h3&gt;實例&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.objectclub.jp/community/memorial/homepage3.nifty.com/masarl/article/testing-framework.html"&gt;Kent Beck Testing Framework&lt;/a&gt;
&lt;a href="http://www.xprogramming.com/testfram.htm"&gt;Simple Smalltalk Testing: With Patterns&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;h4&gt;單複數的一視同仁&lt;/h4&gt;
&lt;p&gt;Composite Pattern 對容器和內容一視同仁，這也可以稱為單複數的一視同仁。也就是說，&lt;strong&gt;把複數個物體集中在一起，可像是在處理一個整體&lt;/strong&gt;。就以程式的測試動作為例，假設 Test1 是鍵盤輸入的輸入測試，Test2 是檔案匯入的輸入測試，Test3 是網路匯入的輸入測試。如果現在想把 Test1, Test2, Test3 這三個整合成一個&lt;strong&gt;輸入測試&lt;/strong&gt;，利用 Component Pattern 就能辦到。先把複數個測試集中起來設為 &lt;strong&gt;輸入測試&lt;/strong&gt;，再建立一個包含其他測試的&lt;strong&gt;輸出測試&lt;/strong&gt;，最後兩者合起來便成為&lt;strong&gt;輸出/輸入測試&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;細節&lt;/h3&gt;
&lt;h4&gt;add 要放在哪裡?&lt;/h4&gt;
&lt;p&gt;我們在 Entry 類別定義 add 方法，然後再丟出例外。實際上能使用 add 方法的也只有 Directory 類別而已。add 方法的擺放及實作有幾種可能：&lt;/p&gt;
&lt;h5&gt;在 Entry 類別進行實作並且設為程式錯誤&lt;/h5&gt;
&lt;p&gt;這是程式範例的作法。在實際能使用 add 方法的 Directory 類別則重新寫入 Entry 類別的 add，置換成有意義的實作。&lt;/p&gt;
&lt;p&gt;由於 File 類別從 Entry 類別繼承到 add 方法，所以可以做 add。但會丟出例外。&lt;/p&gt;
&lt;h5&gt;在 Entry 類別進行實作，沒有任何動作&lt;/h5&gt;
&lt;p&gt;也就是主體為空。&lt;/p&gt;
&lt;h5&gt;在 Entry 類別有宣告，但沒實作&lt;/h5&gt;
&lt;p&gt;在 Entry 類別把 add 方法設為抽象方法，如果有必要則另外在子類別加以定義，無此必要則設為程式錯誤，這也是一種作法。好處是可以統一處理，不過如此一來就必須在 File 類別實作根本不需要的 add。&lt;/p&gt;
&lt;h5&gt;只放在 Directory 類別&lt;/h5&gt;
&lt;p&gt;這種作法是不把 add 方法放在 Entry 類別，只有真正有必要的 Directory 類別才放。但是若採取這種作法時，如果 add 到 Entry 型態變數(其實際內容為 Directory 的物件個體)，就必須一個個強迫轉型成 Directory 型態。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;如果現在想在程式範例中新增一個能從 Entry 的物件個體(其子類別的物件個體)取得&lt;strong&gt;全路徑&lt;/strong&gt;的功能，例如想從 File 的物件個體取得字串 "/root/usr/yuki/Composite.java"，該修改哪個類別?&lt;/h4&gt;
&lt;p&gt;把 parent 欄位保留在 Entry。在根目錄時，則 parent 為 null。從接收到的物件個體往上回溯到 parent 欄位，則可以建立出全路徑。要修改的是 Entry 類別和 Directory 類別。在Directory 類別則用 add 方法修改 parent 欄位。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/5afae2a800526ac9f1fc.js"&gt;&lt;/script&gt;</summary></entry><entry><title>Decorator Pattern -- 對裝飾和內容一視同仁</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/decorator.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/decorator.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;海綿蛋糕、鮮奶油蛋糕、草莓奶油蛋糕或生日蛋糕的原型其實都是海綿蛋糕，只不過運用了各種修飾技巧，能符合不同目的而改變。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;物件也很像是蛋糕的多變化，首先建立一個像是海綿蛋糕的核心物件，再一層層加上裝飾用的功能，就可以完全符合所需的物件。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;在字串周圍加上裝飾外框後再列印出來的程式。裝飾外框是指以-,+,| 等字元組成的框線。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/74632b289d5d81ac90d2.js"&gt;&lt;/script&gt;

&lt;h4&gt;Component 參與者&lt;/h4&gt;
&lt;p&gt;新增功能的核心參與者。在蛋糕的比喻說明中，相當於裝飾前的海綿蛋糕。Component 只規定海綿蛋糕的介面。例如 Display 類別。&lt;/p&gt;
&lt;h4&gt;ConcreteComponent 參與者&lt;/h4&gt;
&lt;p&gt;實作 Component 介面的具體海綿蛋糕。例如 StringDisplay 類別。&lt;/p&gt;
&lt;h4&gt;Decorator (裝飾者) 參與者&lt;/h4&gt;
&lt;p&gt;具有跟 Component 參與者相同的介面，另外還有 Decorator 要修飾的 Component。這個參與者是 "早就知道" 自己要去修飾的對象。例如 Border 類別。&lt;/p&gt;
&lt;h4&gt;ConcreteDecorator 參與者&lt;/h4&gt;
&lt;p&gt;具體的 Decorator 參與者，例如 SiderBorder 和 FullBorder 類別。&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;h4&gt;可穿透的介面&lt;/h4&gt;
&lt;p&gt;對裝飾外框與內容一視同仁。例如&lt;strong&gt;裝飾外框&lt;/strong&gt;的 &lt;strong&gt;Border&lt;/strong&gt; 類別是表示&lt;strong&gt;內容&lt;/strong&gt;的 &lt;strong&gt;Display&lt;/strong&gt; 類別的子類別，這就是一視同仁。換句話說，Border 類別以及其子類別具有跟表示&lt;strong&gt;內容&lt;/strong&gt;的 Display  類別相同的介面。&lt;/p&gt;
&lt;p&gt;即使用裝飾外框把內容包起來，也不能隱藏介面，gelColumns,getRows,getRowText, 以及 show 這幾個方法並沒有被隱藏起來，還是可以從其他類別看得到。這個特性就稱為&lt;strong&gt;可穿透性&lt;/strong&gt;的介面。&lt;/p&gt;
&lt;p&gt;如 &lt;strong&gt;b4&lt;/strong&gt; 所示，即使用了再多的裝飾外框，介面本身仍然沒有受到影響。&lt;/p&gt;
&lt;p&gt;因為介面具有可穿透性，所以 Decorator Pattern 就有跟 Composite Pattern 很像的遞迴架構。也就是說，這個架構是&lt;strong&gt;裝飾外框所儲存的內容實際上是另外一個裝飾外框&lt;/strong&gt;。兩者很像，但目的不同，Decorator Pattern 的目的是為了新增功能。&lt;/p&gt;
&lt;h4&gt;可新增功能但內容不變&lt;/h4&gt;
&lt;p&gt;在 Decorator Pattern 當中，裝飾外框和內容具有共用的介面。雖然介面是共用，但功能逐漸一一新增進去的話，外面就一層層愈包愈多。如果是用 SiderBorder 來包 Display 的話，列印時可以設定在左右兩邊加入新的裝飾字元; 如果是用 FullBorder 來包，整個外圍都要加上裝飾外框。你並不需要去修改它的包裝方式，因為它&lt;strong&gt;不需要換掉被包起來的主體，就能新增其他功能&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Decorator Pattern 有使用到&lt;strong&gt;委讓&lt;/strong&gt;。所有對裝飾外框的要求都會推到&lt;strong&gt;內容&lt;/strong&gt;去。例如 SiderBorder 的 getColumns 會呼叫 display.getColumns()。&lt;/p&gt;
&lt;h4&gt;可新增動態功能&lt;/h4&gt;
&lt;p&gt;Decorator Pattern 所使用的委讓並沒有緊密結合類別，所以不需要修改框架的原始碼就能建立一個改變物件關係的新物件。&lt;/p&gt;
&lt;h4&gt;即使只有簡單的種類規劃，也可增加多種功能&lt;/h4&gt;
&lt;p&gt;利用 Decorator Pattern 可以新增多種不同的功能，因為只要有準備好多種具體裝飾外框，就能隨意組合成新物件。各個外框就算很簡單也無所謂。&lt;/p&gt;
&lt;h3&gt;實例&lt;/h3&gt;
&lt;p&gt;java.io 是一個管理 input/output 的 package。&lt;/p&gt;
&lt;p&gt;首先，可建立一個從檔案讀入資料的物件個體，例如：&lt;/p&gt;
&lt;p&gt;Reader reader = new FileReader("datafile.txt");&lt;/p&gt;
&lt;p&gt;而從檔案讀入資料時，會需要做 buffering。&lt;/p&gt;
&lt;p&gt;Reader reader = new BufferedReader(new FileReader("datafile.txt"));&lt;/p&gt;
&lt;p&gt;如此一來，如果要建立 BufferedReader 類別的物件個體時，就會指定 FileReader 類別的物件個體作為實際上資料被讀入的位置。&lt;/p&gt;
&lt;p&gt;接著，還有行號管理的部份。&lt;/p&gt;
&lt;p&gt;Reader reader = new LineNumberReader(new BufferedReader(new FileReader("datafile.txt")));&lt;/p&gt;
&lt;p&gt;Reader 類別的物件個體及其子類別的物件個體可傳遞給 LineNumberReader 或 BufferedReader 的建構子。&lt;/p&gt;
&lt;p&gt;有時候不一定會做緩衝處理，例如&lt;/p&gt;
&lt;p&gt;Reader reader = new LineNumberReader(new FileReader("datafile.txt"));&lt;/p&gt;
&lt;h3&gt;缺點&lt;/h3&gt;
&lt;p&gt;彼此類似的小類別一不小心就愈建愈多。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;1.請新增一個 UpDownBorder 類別，讓它能列印出上下的裝飾字元。&lt;/h4&gt;
&lt;script src="https://gist.github.com/twmht/8bf5d472e352942dd2b3.js"&gt;&lt;/script&gt;

&lt;h4&gt;2.請新增一個 ConcreteComponent 參與者，假設它是可列印多個字串的 MultiStringDisplay 類別。&lt;/h4&gt;
&lt;script src="https://gist.github.com/twmht/5a18ece53156e565e125.js"&gt;&lt;/script&gt;</summary></entry><entry><title>Facade Pattern -- 單一窗口</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/facade.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/facade.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;程式這個東西往往愈做愈大，許多類別彼此間的影響讓關係更加錯綜複雜。因此在使用類別時，要確實了解類別之間的關係，正確依序呼叫方法。
利用大型程式進行資料處理時，必須精確控制相關的類別。既然如此，就乾脆設個處理專用的"窗口"，如此一來就不需要個別控制類別，只要把要求丟給"窗口"即可。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;Facade Pattern 能整合錯綜複雜的來龍去脈，提供較為高級的介面。Facade 參與者則是讓系統外埠看到較簡單的介面。而且 Facade 參與者還會兼顧系統內部各類別功能和互動關係，以最正確的順序利用類別。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;設計一個產生使用者 Web 網頁的程式。
以三個類別的簡單系統為例，這個系統中包含有利用郵件信箱取得姓名的資料庫(Database)、產生 HTML 檔的類別(HtmlWriter)以及提供較高級介面的類別(PageMaker，也就是 Facade 參與者)。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/2df294dc66cd9a1008ce.js"&gt;&lt;/script&gt;

&lt;h4&gt;Facade (正面) 參與者&lt;/h4&gt;
&lt;p&gt;構築成系統的其他參與者之"單一窗口"。Facade 對系統外部提供較高級且單一的介面。例如 PageMaker 類別。&lt;/p&gt;
&lt;h4&gt;構築成系統的其他參與者&lt;/h4&gt;
&lt;p&gt;其他林林種種的參與者則各司其職，Facade 參與者的存在並不會有任何影響。它們乖乖的聽從 Facade 的呼叫出來做事，但不會反過來呼叫 Facade。例如 Database 及 HtmlWriter 類別。&lt;/p&gt;
&lt;h4&gt;Client 參與者&lt;/h4&gt;
&lt;p&gt;利用 Facade Pattern 的參與者。例如 Main 類別。&lt;/p&gt;
&lt;h4&gt;優點&lt;/h4&gt;
&lt;h3&gt;減少介面&lt;/h3&gt;
&lt;p&gt;Facade 讓複雜的內容看起來很單純。躲在背後工作的那些類別間的關係和用法相當複雜，Facade 可以把這些複雜的方法組合隱藏在背後，讓 Client 只專注在 Facade 上面。&lt;/p&gt;
&lt;p&gt;這部份的重點就在&lt;strong&gt;減少介面&lt;/strong&gt;。看了太多的類別和方法，只會讓程式設計師猶豫不知道該使用哪一個才對，而且還得注意呼叫順序不能搞錯。要注意的事情愈多，就愈是容易弄錯。所以不如&lt;strong&gt;把精神放在介面較少的 Facade 上&lt;/strong&gt;，反而比較有效率。&lt;/p&gt;
&lt;h3&gt;Facade Pattern 的遞迴應用&lt;/h3&gt;
&lt;p&gt;假設現在有數個內含 Facade 的類別集合，這時候當然可以新增一個整合所有集合的 Facade。換句話說，就是遞迴應用 Facade Pattern。&lt;/p&gt;
&lt;p&gt;如果是面對大型系統有大量的類別和 package 時，在適當的位置使用 Facade Pattern 會很方便。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;請在 PageMaker 類別新增一個 makeLinkPage 方法，這個方法可產生使用者郵件信箱的相關鏈結。&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="n"&gt;pagemaker&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.FileWriter&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Properties&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Enumeration&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PageMaker&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;PageMaker&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;   &lt;span class="c1"&gt;// 不建立物件個體，所以宣告private&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;makeWelcomePage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;mailaddr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Properties&lt;/span&gt; &lt;span class="n"&gt;mailprop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperties&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;maildata&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mailprop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mailaddr&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;HtmlWriter&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HtmlWriter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileWriter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Welcome to &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;#39;s page!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;paragraph&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;歡迎來到&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;的網頁。&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;paragraph&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;等你來信喔！&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mailto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mailaddr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; is created for &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;mailaddr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; (&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;makeLinkPage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;          
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;HtmlWriter&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HtmlWriter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileWriter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Link page&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Properties&lt;/span&gt; &lt;span class="n"&gt;mailprop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperties&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;maildata&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Enumeration&lt;/span&gt; &lt;span class="n"&gt;en&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mailprop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;propertyNames&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasMoreElements&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;mailaddr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextElement&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mailprop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mailaddr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;(unknown)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mailto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mailaddr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; is created.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Flyweight Pattern</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/flyweight.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/flyweight.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;當想要節省記憶體空間的時候使用。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;儘量共用物件個體，不做無謂的new。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;輸出大型文字。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/aa42efa98d66a87a5271.js"&gt;&lt;/script&gt;

&lt;h4&gt;Flyweight 參與者&lt;/h4&gt;
&lt;p&gt;表示以一般處理會讓程式變重，因此選擇共用較佳的參與者。例如BigChar類別。&lt;/p&gt;
&lt;h4&gt;Flyweight FlyweightFactory 參與者&lt;/h4&gt;
&lt;p&gt;產生Flyweight 參與者的工廠。利用這個工廠來產生 Flyweight 參與者，即可共用物件個體。　例如BigCharFactory類別。&lt;/p&gt;
&lt;h4&gt;Client 參與者&lt;/h4&gt;
&lt;p&gt;利用 FlyweightFactory 參與者產生並使用 Flyweight 參與者。例如 BigString 類別。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;1. 在 BigString 中新增如下的建構子。BigString(String string, boolean shared)，若 shared 為 true 則共用 BigChar;若為 false 則不共用。&lt;/h4&gt;
&lt;p&gt;若不共用 BigChar，則不使用 BigCharFactory 而改用 new 的方式。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/6436cb19bd60c33d194e.js"&gt;&lt;/script&gt;

&lt;h4&gt;2. 利用上一個問題所修改的 BigString 類別，比較共用和不共用 BigChar 的物件個體時的記憶體使用量。&lt;/h4&gt;
&lt;p&gt;結果的確是共用的話，記憶體耗用較少。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Usage: java Main digits&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Example: java Main 1212123&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;BigString&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;bs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BigString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;// 不共用&lt;/span&gt;
        &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;bs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BigString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;// 共用&lt;/span&gt;
        &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;3. 在 BigCharFactory 類別中，getBigChar 是 synchronized 方法。如果不設為 synchronize，會出現什麼問題?&lt;/h4&gt;
&lt;p&gt;在多個 Thread 呼叫時，可能會有重複 new 的情形。&lt;/p&gt;</summary></entry><entry><title>Interpreter Pattern -- 以類別來表達文法規則</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/interpreter.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/interpreter.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;Design Pattern 的目的之一就是要提高類別的可再用性。 可再用性是指已經產生的類別不需要多做修改或是儘量不修改就能多次使用的意思。&lt;/p&gt;
&lt;p&gt;Interpreter Pattern 是用簡單的"迷你語言"來表現程式要解決的問題，以迷你語言寫成"迷你程式"而表現具體的問題。迷你程式本身無法獨自啟動，必須先用Java語言寫另一個負責翻譯的程式(直譯器)。當能解決的問題發生變化時，要修改迷你程式來對應處理，而不是修改直譯器(儘量避免去修改)。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;當問題發生改變時，儘可能不去修改到直譯器（以Java寫成）。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;首先來定義我們的問題，我們要用迷你語言來操控玩具車。玩具車基本動作有 go, right, left　以及 repeat。go 表示前進，right 表示向右轉，left 表示向左轉，repeat 像是一個迴圈，後面接上若干個命令。
以下是幾個範例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;program go right right go end&lt;/li&gt;
&lt;li&gt;program repeat 4 go right end end # repeat 結尾要加上 end，就像右大括號一樣&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;定義 BNF 如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;#60;program&amp;#62; ::= program &amp;#60;command list&amp;#62;&lt;/li&gt;
&lt;li&gt;&amp;#60;command list&amp;#62; ::=  &amp;#60;command&amp;#62;* end&lt;/li&gt;
&lt;li&gt;&amp;#60;command&amp;#62; ::= &amp;#60;repeat command&amp;#62; | &amp;#60;primitive command&amp;#62;&lt;/li&gt;
&lt;li&gt;&amp;#60;repeat command&amp;#62; ::= repeat &amp;#60;number&amp;#62; &amp;#60;command list&amp;#62;&lt;/li&gt;
&lt;li&gt;&amp;#60;primitive command&amp;#62; ::= go | right | left&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根據每一條語法設計一個類別，語法看到哪裡，類別就設計到哪裡。要注意的是，&lt;b&gt;到這個方法時，記號要讀取到哪裡 ; 離開這個方法時，記號又該讀取到哪裡&lt;/b&gt;。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/72c8581377623688e342.js"&gt;&lt;/script&gt;

&lt;p&gt;如果有出現 [..] 包起來的內容，表示 interpreter 確實有解讀到該行程式。&lt;/p&gt;
&lt;h3&gt;Interpreter Pattern 的所有參與者&lt;/h3&gt;
&lt;h4&gt;AbstractExpression 參與者&lt;/h4&gt;
&lt;p&gt;規定樹狀剖析之節點的共用介面。例如 Node 類別，定義了 parse 方法。&lt;/p&gt;
&lt;h4&gt;TerminalExpression 參與者&lt;/h4&gt;
&lt;p&gt;表示不能被展開的節點，例如 PrimitiveCommandNode 類別。&lt;/p&gt;
&lt;h4&gt;NonterminalExpression 參與者&lt;/h4&gt;
&lt;p&gt;可以被展開的節點，例如 ProgramNode、CommandNode、RepeatCommandNode、CommandListNode 等類別。&lt;/p&gt;
&lt;h4&gt;Context 參與者&lt;/h4&gt;
&lt;p&gt;提供 interpreter 進行文法解析時所需要的資訊的參與者，例如 Context 類別。&lt;/p&gt;
&lt;h4&gt;Client 參與者&lt;/h4&gt;
&lt;p&gt;呼叫 TerminalExpression 以及 NonterminalExpression，以建立樹狀剖析的參與者。例如 Main 類別。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;請修改範例程式，讓它能夠執行所收到的內容，例如，可以寫出 GUI 來執行。&lt;/h4&gt;
&lt;p&gt;這裡是把跟 GUI 有關的部份放在 turtle package 中，讓 language package 裡面沒有 GUI。只要建立一個能在其他 package 裡執行 Executor 和 ExecutorFactory 介面的類別，不必修改 language package 就能另外建立一個可以&lt;b&gt;執行&lt;/b&gt;相同程式的新程式。
&lt;script src="https://gist.github.com/twmht/e0e92d0edf9dbe73aa4b.js"&gt;&lt;/script&gt;&lt;/p&gt;</summary></entry><entry><title>Iterator Pattern</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/iterator.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/iterator.html</id><summary type="html">&lt;h3&gt;Iterator Pattern是指依序掃描並且處理多個數字或變數。本身也是反覆的意思，又可以稱為迭代器。&lt;/h3&gt;
&lt;p&gt;現在要寫一個程式，可以把書籍放到書架上，並且依序印出來。&lt;/p&gt;
&lt;p&gt;Aggregate Interface，實作此Interface的類別就變成類似&lt;font color=red&gt;陣列（多個數字或變數的集合)&lt;/font&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Aggregate&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//一個可對應聚合的iterator&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="nf"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果要掃描整個聚合時，利用iterator方法即可建立一個實作Iterator介面的類別物件個體。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Iterator&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//有沒有下一個元素&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;hasNext&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//下一個元素&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Book類別。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;BookShelf類別就是一個聚合(放書)的實體，實作Aggregate Interface。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookShelf&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Aggregate&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;BookShelf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxsize&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;maxsize&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="nf"&gt;getBookAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;appendBook&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;books&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getLength&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="nf"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;BookShelfIterator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;BookShelfIterator實作Iterator Interface。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookShelfIterator&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;BookShelf&lt;/span&gt; &lt;span class="n"&gt;bookShelf&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;BookShelfIterator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BookShelf&lt;/span&gt; &lt;span class="n"&gt;bookShelf&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bookShelf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bookShelf&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;hasNext&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bookShelf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLength&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bookShelf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBookAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Main類別，完成整個程式。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;BookShelf&lt;/span&gt; &lt;span class="n"&gt;bookShelf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BookShelf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;bookShelf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appendBook&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Around the World in 80 Days&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;bookShelf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appendBook&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bible&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;bookShelf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appendBook&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cinderella&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;bookShelf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appendBook&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Daddy-Long-Legs&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="c1"&gt;//我們只有用到Iterator的方法，實際上BookShelf內部怎麼實作的我們不管。&lt;/span&gt;
        &lt;span class="c1"&gt;//如果今天BookShelf把陣列改成vector，下面的程式碼還是不會變動。&lt;/span&gt;
        &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bookShelf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasNext&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要多加利用Abstract class以及Interface來設計程式。&lt;/p&gt;
&lt;h4&gt;Iterator 參與者&lt;/h4&gt;
&lt;p&gt;決定依序掃描元素的介面。它決定取得是否有下一個元素的相關資訊的 &lt;strong&gt;hasNext&lt;/strong&gt; 方法，以及取得下一個元素的 &lt;strong&gt;next&lt;/strong&gt; 方法。例如 Iterator 介面。&lt;/p&gt;
&lt;h4&gt;ConcreteIterator 參與者&lt;/h4&gt;
&lt;p&gt;實際上實作 Iterator 所決定的介面，例如 BookShelfIterator 類別。必須掌握掃描時的必要資訊，例如 BookShelf 類別件個體儲存 bookShelf 欄位，目前該書則儲存在 index 欄位。&lt;/p&gt;
&lt;h4&gt;Aggregate 參與者&lt;/h4&gt;
&lt;p&gt;決定建立 Iterator 的介面。這裡的介面是指建立&lt;strong&gt;能依序掃描出現在持有元素的人&lt;/strong&gt;的方法。例如 Aggregate 介面，它決定了 Iterator 方法。&lt;/p&gt;
&lt;h4&gt;ConcreteAggregate 參與者&lt;/h4&gt;
&lt;p&gt;實際上實作 Aggregate 所決定的介面，它是建立實際的 Iterator 參與者，也就是 ConcreteIterator 的物件個體。例如 BookShelf 類別，它實作了 Iterator 方法。&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;h4&gt;無論實作結果如何，都能使用 Iterator&lt;/h4&gt;
&lt;p&gt;利用 Iterator 可以跟實作分開，單獨進行遞增。請看以下的程式碼。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasNext&lt;/span&gt;&lt;span class="o"&gt;()){&lt;/span&gt;
    &lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這裡指使用到 hasNext 和 next 這兩個 Iterator 的方法，並沒有使用到 BookShelf 實作時所使用的方法。換句話說，這裡的&lt;strong&gt;while 迴圈不會受到 BookShelf 實作的影響&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;假設原先有實作了 BookShelf，但現在不想再利用陣列管裡書籍，打算把程式修改成能使用 java.util.Vector。無論 BookShelf 修改成怎樣，BookShelf 仍然還有 iterator 方法，只要能回傳正確的 Iterator(即有傳回正常實作 hasNext 及 next 方法的類別的物件個體)，&lt;strong&gt;上面的　while 迴圈即使一字不改也能正常運作&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;從這個角度來看，就可以了解為什麼在 Main 類別中我們把　iterator 方法的回傳值指定給  Iterator 型態變數，而不是 BookShelfIterator　型態變數。因為我們不是利用 BookShelfIterator 的方法來寫程式，而只是打算利用 Iterator 的方法來寫程式而已。&lt;/p&gt;
&lt;h4&gt;一個以上的 Iterator&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;把遞增的架構放在 Aggregate 之外&lt;/strong&gt;是 Iterator Pattern 的特徵之一。利用這個特點可以對一個 ConcreteAggregate 建立出一個以上的 ConcreteIterator。&lt;/p&gt;
&lt;h3&gt;習慣抽象類別及介面&lt;/h3&gt;
&lt;p&gt;如果對如何使用抽象類別和介面還不太清楚的話，很容易一腳栽進去用 ConcreteAggregate 或　ConcreteIterator　來寫程式的壞習慣，就再也脫不了身回來用 Aggregate 介面或　Iterator 介面。因為只要用具體類別就能解決所有問題的感覺會讓人不知不覺上癮。&lt;/p&gt;
&lt;p&gt;為了提高再利用性，因此必須引進抽象類別和介面的觀念。&lt;/p&gt;
&lt;h3&gt;Aggregate 與　Iterator 的對應&lt;/h3&gt;
&lt;p&gt;BookShelfIterator 非常了解 BookShelf 整個實作過程，也因為它了解實作，所以才能呼叫用來取得&lt;strong&gt;下一本書&lt;/strong&gt;的方法　getBookAt。&lt;/p&gt;
&lt;p&gt;由於如果 BookShelf 的實作整個被改變，而且連 getBookAt 方法這個介面也有變動的話，就必須修改 BookShelfIterator。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;在 BookShelf 類別中，若書籍數量超過最先設定的書架大小，就無法繼續把書放上去。請利用 java.util.Vector 取代陣列，把程式改成即使已經超過書架容量也能繼續新增書籍。&lt;/h4&gt;
&lt;p&gt;如下。不需要修改 Main 的 while 迴圈。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Vector&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookShelf&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Aggregate&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;   
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;BookShelf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;initialsize&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;         
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initialsize&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;   
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="nf"&gt;getBookAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;appendBook&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getLength&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;                    
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="nf"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;BookShelfIterator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Mediator Pattern -- 只要面對一個顧問</title><link href="http://twmht.github.io/blog/posts/2014/06/design-pattern/mediator.html" rel="alternate"></link><updated>2014-06-29T16:14:36+08:00</updated><author><name>twmht</name></author><id>tag:twmht.github.io/blog,2014-06-29:posts/2014/06/design-pattern/mediator.html</id><summary type="html">&lt;h3&gt;用的時間點&lt;/h3&gt;
&lt;p&gt;一個小組裡10個同樣立場的成員共同進行作業，但卻各自為政。每個成員都對別人發出指令，讓整個作業亂成一團。而且還有干擾其他成員的作業方式、不斷發生指令相左的情形。這時候如果有一個立場超然的 &lt;strong&gt;顧問&lt;/strong&gt; 站出來說： &lt;strong&gt;請各位成員把所有狀況回報給我這個顧問，我會整體做出考量後發給各位適當的指示。但是我不會插手管各位手上工作的細節&lt;/strong&gt;。所有成員同意顧問的提議，於是達成共識。&lt;/p&gt;
&lt;h3&gt;如何設計&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;每個成員都只對顧問提出報告，也只有顧問會發出指令給各個成員&lt;/strong&gt;。成員彼此之間也不會去探問目前狀況如何，或亂發指令給其他成員。mediator 就是一個顧問，如果有困難就告訴顧問、發生什麼會影響到整個小組的事情也要告訴顧問。對於顧問提出的要求事項要確實執行。所有小組成員都不可以擅自跟其他成員溝通意見做判斷，必須透過顧問才能進行到下一個動作。而顧問則根據小組成員所提出的報告做整體性判斷，對各個成員發出指令。&lt;/p&gt;
&lt;h3&gt;程式範例&lt;/h3&gt;
&lt;p&gt;設計一個要求輸入姓名和密碼的系統登入對話方塊的 GUI 應用軟體。這個對話方塊的使用規則如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;選擇訪客 (Guest) 登入或用戶 (Login) 登入&lt;/li&gt;
&lt;li&gt;若為用戶登入，則輸入用戶名稱和密碼&lt;/li&gt;
&lt;li&gt;選擇登入則按OK，放棄登入則按 Cancel。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有以下限制:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;　若選擇訪客登入，則用戶名稱和密碼要設為不可使用，無法輸入字串。
&lt;/em&gt;　若選擇用戶登入，則用戶名稱可以使用，可輸入字串。
&lt;em&gt;　若用戶名稱的位置沒輸入任何字元時，則密碼為不可使用。
&lt;/em&gt;　只要用戶名稱的位置有輸入字元，則密碼為可以使用 (若為訪客登入，則密碼當然就是不可使用)
&lt;em&gt;　若用戶名稱和密碼這兩個位置都有輸入字元時，則 OK 鍵為可使用，但若任何一個位置是空白的時候，則 OK 無法按下。(若為訪客登入，則 OK 當然永遠可以使用)
&lt;/em&gt;　Cancel 隨時都可以按下。&lt;/p&gt;
&lt;p&gt;像這樣需要協調多個物件的時候，就是 Mediator Pattern 的使用時機。不要讓物件彼此直接溝通，另設一個 &lt;strong&gt;出面幫忙的顧問&lt;/strong&gt;，每個物件都只跟這個顧問溝通聯絡。當然，畫面輸出控制的邏輯就只要寫在顧問裡面即可。&lt;/p&gt;
&lt;script src="https://gist.github.com/twmht/9277f7bbc0685c070997.js"&gt;&lt;/script&gt;

&lt;h4&gt;Mediator (正面) 參與者&lt;/h4&gt;
&lt;p&gt;Mediator 是跟 Colleague 進行溝通，規定調整的介面。例如 Mediator 介面。&lt;/p&gt;
&lt;h4&gt;ConcreteMediator 參與者&lt;/h4&gt;
&lt;p&gt;ConcreteMediator 是實作 Mediator 的介面，進行實際的調整。例如 LoginFrame 類別。&lt;/p&gt;
&lt;h4&gt;Colleague 參與者&lt;/h4&gt;
&lt;p&gt;Colleague 是規定與 Mediator 溝通的介面。例如 Colleague 介面。&lt;/p&gt;
&lt;h4&gt;ConcreteColleague 參與者&lt;/h4&gt;
&lt;p&gt;ConcreteColleague 實作 Colleague 的介面。例如 ColleagueButton、ColleagueTextField 及 ColleagueCheckbox 等幾個類別。&lt;/p&gt;
&lt;h3&gt;優點&lt;/h3&gt;
&lt;h4&gt;解決分散處理時所帶來的困擾&lt;/h4&gt;
&lt;p&gt;因為所有的邏輯處理都放在 mediator 身上，因此只需要注意 mediator 即可。如果邏輯分散在各個元件身上，會變得很麻煩。&lt;/p&gt;
&lt;h3&gt;哪些可以再利用&lt;/h3&gt;
&lt;p&gt;ConcreteColleague 容易再利用，因為與處理邏輯獨立分開。但 ConcreteMediator 反而就不容易再利用。&lt;/p&gt;
&lt;h3&gt;問題&lt;/h3&gt;
&lt;h4&gt;1. 將程式修改成當用戶登入時，需要用戶名稱和密碼兩者輸入字元都超過4個字元，OK鍵才可以使用。&lt;/h4&gt;
&lt;p&gt;只需要將 LoginFrame 類別的 userpassChanged 方法的條件判斷修改如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;textUser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getText&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;textPass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getText&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;//statement here&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2. ConcreteColleague 都有 mediator 欄位，而且 setMediator 方法的內容也相同。請在 Colleague 介面加入 mediator 欄位，讓它實作 setMediator 方法。&lt;/h4&gt;
&lt;p&gt;無法實作，因為介面不能有物件個體欄位，而且也無法實作具體方法。&lt;/p&gt;
&lt;p&gt;同時也無法將 Colleague 介面設為類別。例如，假設把它設為類別，則 ColleagueButton 就沒辦法再繼承 Button 類別，因為 Java 只允許單繼承。&lt;/p&gt;</summary></entry></feed>